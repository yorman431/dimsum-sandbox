{"version":3,"sources":["../../../../../src/form/Input/InputAddonWrapper.js","../../../../../src/form/Input/InputImpl.js","../../../../../src/form/Input/showEllipsis.js","../../../../../src/form/Input/DSInput.js","../../../src/CloseCircle.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../src/Toolbar/ToolbarItem.js","../../../../src/Toolbar/ToolbarGroup.js","../../../../src/Toolbar/ToolbarDivider.js","../../../../src/Toolbar/DSToolbar.js","../../../src/form/TextBox/DSTextBox.js","../../../../src/Tooltip/TooltipType.js","../../../../src/Tooltip/DSTooltip.js","../../../src/constants.js"],"names":["InputWrapper","aggregatedClasses","InputAddon","left","right","variant","InputAddonWrapper","components","this","renderAddonComponent","Array","comp","containerProps","classProps","component","key","index","className","innerRef","rightComponents","leftComponents","children","InputComponent","React","hasError","readOnly","disabled","rightAddon","getRightAddon","leftAddon","getLeftAddon","Component","Input","clearable","value","WrapperForTooltipInput","InputCustomWrapper","ClearableButton","getValidComponents","noop","InputImpl","width","active","showTooltip","e","onBlur","onFocus","client","window","onClear","onChange","target","ref","current","focus","buttonType","data-testid","icon","onClick","handleClear","role","id","isShowElipsisActive","autoFocus","name","maxLength","minLength","placeholder","leftComponent","rightComponent","disableTooltip","onKeyDown","onKeyUp","onPaste","required","type","customInputType","min","max","onMouseLeave","onMouseOut","style","tabIndex","rest","filter","inputProps","autocomplete","onMouseEnter","String","showEllipsis","isOpen","title","zIndex","triggerComponent","PropTypes","props","Error","fluidWidth","undefined","otherProps","aria-label","createIcon","paths","height","extraProps","cloneElement","ToolbarItem","labelText","menu","useRef","useFocusGroupItem","btn","placement","Position","string","ToolbarGroupContainer","space","ToolbarGroup","size","decorateToolbarChildren","ToolbarDivider","ToolbarContainer","withDepth","alignment","DSToolbar","autoFocusOnMount","containerRef","getContainer","keyBindings","Tab","orientation","mergeRefs","DSTextBox","TooltipType","TooltipContainer","TooltipText","DSTooltip","PopperPositions","TOP","delayClose","DEFAULT_DELAY_CLOSE","delayOpen","DEFAULT_DELAY_OPEN","interactionType","PopperInteractions","HOVER","onOpen","springAnimationComponent","tooltipType","showArrow","otherTooltipProps","tooltipBlockName","convertPropToCssClassName","Content","blockName","contentComponent","getComponentFromProps","bool"],"mappings":"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","file":"static/js/10.348fadcf.chunk.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { Component } from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'input-addon-wrapper'\n\nconst InputWrapper = aggregatedClasses('div')(blockName)\nconst InputAddon = aggregatedClasses('span')(blockName, 'addon', ({ left, right, variant }) => ({\n  left,\n  right,\n  [variant]: variant,\n}))\n\n\nexport default class InputAddonWrapper extends Component {\n  static defaultProps = {\n    rightComponents: [],\n    leftComponents: [],\n    containerProps: {},\n  }\n  getLeftAddon(components) {\n    return this.renderAddonComponent(true, components)\n  }\n  getRightAddon(components) {\n    return this.renderAddonComponent(false, components)\n  }\n  renderAddonComponent(left = true, components) {\n    if (!components) return null\n    if (Array.isArray(components)) {\n      if (!components.filter(comp => comp).length) return null\n    }\n    const { containerProps } = this.props\n    const classProps = left\n      ? { left: true }\n      : { right: true }\n\n    return (\n      <InputAddon\n        classProps={classProps}\n        {...containerProps}\n      >\n        {components.map((component, index) => component\n          && React.cloneElement(component, { ...component.props, key: index }))}\n      </InputAddon>\n    )\n  }\n  render() {\n    const {\n      className,\n      innerRef,\n      rightComponents,\n      leftComponents,\n      children,\n      variant,\n      containerProps,\n    } = this.props\n\n    const InputComponent = React.Children.only(children)\n\n    const {\n      hasError,\n      readOnly,\n      disabled,\n    } = InputComponent.props\n\n    const rightAddon = this.getRightAddon([...rightComponents])\n    const leftAddon = this.getLeftAddon([...leftComponents])\n\n    return (\n      <InputWrapper\n        className={className}\n        classProps={{\n          hasError,\n          readOnly,\n          disabled,\n          variant,\n        }}\n        innerRef={innerRef}\n        {...containerProps}\n      >\n        {leftAddon}\n        {InputComponent}\n        {rightAddon}\n      </InputWrapper>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport CloseCircle from '@elliemae/ds-icons/CloseCircle';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTooltip from '@elliemae/ds-basic/Tooltip';\nimport InputAddonWrapper from './InputAddonWrapper';\nimport { showEllipsis } from './showEllipsis';\n\nconst blockName = 'input';\nconst Input = aggregatedClasses('input')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst WrapperForTooltipInput = aggregatedClasses('div')(\n  blockName,\n  'tooltip-ref',\n);\nconst InputCustomWrapper = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst ClearableButton = aggregatedClasses(DSButton)(blockName, 'clearable');\n\nconst getValidComponents = component => component;\n\nconst noop = () => null;\nclass InputImpl extends Component {\n  static defaultProps = {\n    onBlur: noop,\n    onFocus: noop,\n  };\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.refTooltip = React.createRef();\n  }\n  state = {\n    width: -1,\n    active: false,\n    showTooltip: false,\n  };\n  componentDidMount() {\n    this.setWidth();\n    window.addEventListener('resize', this.setWidth);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setWidth);\n  }\n  handleBlur = e => {\n    const { onBlur } = this.props;\n    onBlur(e);\n    this.setState({\n      active: false,\n    });\n  };\n  handleFocus = e => {\n    const { onFocus } = this.props;\n    onFocus(e);\n    this.setState({\n      active: true,\n    });\n  };\n  handleMouseEnter = () => {\n    this.setState({\n      showTooltip: true,\n    });\n  };\n  handleMouseLeave = () => {\n    this.setState({\n      showTooltip: false,\n    });\n  };\n  setWidth = () => {\n    const client = this.refTooltip.current.getBoundingClientRect();\n    this.setState({\n      width: client.width,\n    });\n  };\n  handleClear() {\n    const { onClear, onChange, clearable } = this.props;\n    if (clearable && onClear) {\n      onClear();\n    } else {\n      onChange({ target: { value: '' } });\n    }\n\n    if ((this.ref || {}).current) this.ref.current.focus();\n  }\n  renderClearableComponent() {\n    const { clearable, value, disabled } = this.props;\n    if (disabled) return null;\n    return clearable && value ? (\n      <ClearableButton\n        buttonType=\"text\"\n        data-testid=\"ds-input_clearable-btn\"\n        disabled={disabled}\n        icon={<CloseCircle />}\n        onClick={this.handleClear}\n      />\n    ) : null;\n  }\n  render() {\n    const {\n      role,\n      id,\n      isShowElipsisActive,\n      autoFocus,\n      className,\n      name,\n      innerRef,\n      maxLength,\n      minLength,\n      placeholder,\n      leftComponent,\n      rightComponent,\n      disableTooltip,\n      readOnly,\n      disabled,\n      value,\n      onClick,\n      onChange,\n      onKeyDown,\n      onKeyUp,\n      onFocus,\n      onBlur,\n      onPaste,\n      required,\n      type,\n      customInputType,\n      min,\n      max,\n      clearable,\n      onMouseLeave,\n      onMouseOut,\n      style,\n      containerProps,\n      tabIndex,\n      ...rest\n    } = this.props;\n    const { width, active, showTooltip } = this.state;\n    const rightComponents = [\n      this.renderClearableComponent(),\n      rightComponent,\n    ].filter(getValidComponents);\n    const leftComponents = [leftComponent].filter(getValidComponents);\n\n    const inputProps = {\n      'aria-label': rest['aria-label'],\n      'aria-placeholder': placeholder,\n      'aria-required': required,\n      'aria-multiline': false,\n      'aria-autocomplete': 'none',\n      'data-testid': rest['data-testid'],\n      role,\n      id,\n      ref: this.ref,\n      className,\n      autoFocus,\n      disabled: disabled || readOnly,\n      innerRef,\n      maxLength,\n      minLength,\n      name,\n      onBlur,\n      onChange,\n      onClick,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      onPaste,\n      onMouseLeave,\n      disableTooltip,\n      onMouseOut,\n      placeholder,\n      required,\n      type,\n      value,\n      min,\n      max,\n      style,\n      tabIndex,\n      ...containerProps,\n    };\n\n    let InputComponent = (\n      <WrapperForTooltipInput ref={this.refTooltip} style={{ width: '100%' }}>\n        {!customInputType ? (\n          <Input\n            {...inputProps}\n            autocomplete=\"off\"\n            clearable={clearable}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onMouseEnter={this.handleMouseEnter}\n            onMouseLeave={this.handleMouseLeave}\n            value={value}\n          />\n        ) : (\n          <InputCustomWrapper\n            {...containerProps}\n            clearable={clearable}\n            value={value}\n          >\n            {customInputType({\n              ...inputProps,\n            })}\n          </InputCustomWrapper>\n        )}\n      </WrapperForTooltipInput>\n    );\n    if (\n      showEllipsis(width, value) &&\n      !active &&\n      showTooltip &&\n      width &&\n      isShowElipsisActive\n    ) {\n      InputComponent = (\n        <DSTooltip\n          isOpen={disableTooltip}\n          title={String(value)}\n          zIndex={11}\n          triggerComponent={\n            <WrapperForTooltipInput style={{ width: '100%' }}>\n              {InputComponent}\n            </WrapperForTooltipInput>\n          }\n        />\n      );\n    }\n\n    const renderInput =\n      rightComponents.length || leftComponents.length || clearable ? (\n        <InputAddonWrapper\n          className={className}\n          leftComponents={leftComponents}\n          rightComponents={rightComponents}\n          {...containerProps}\n        >\n          {InputComponent}\n        </InputAddonWrapper>\n      ) : (\n        InputComponent\n      );\n\n    return renderInput;\n  }\n}\n\nInputImpl.propTypes = {\n  className: PropTypes.string,\n  customInputType: PropTypes.func,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isShowElipsisActive: PropTypes.bool,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onPaste: PropTypes.func,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  role: PropTypes.string,\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Should be of type string if using ellipsis tooltip [isShowElipsisActive] prop\n   */\n  value(props, propName, componentName) {\n    // eslint-disable-line consistent-return\n    if (!!props.isShowElipsisActive && typeof props[propName] !== 'string') {\n      return new Error(\n        `Invalid prop \\`${propName}\\` of type \\`${typeof props[\n          propName\n        ]}\\` supplied to` +\n          ` \\`${componentName}\\`. Prop \\`value\\` should be of type \\`string\\` if prop \\`isShowElipsisActive\\` is set to \\`true\\`.` +\n          ' Either set `isShowElipsisActive` to `false`, or properly format your `value` prop to `string`.',\n      );\n    }\n  },\n};\n\nexport default InputImpl;\n","export function showEllipsis(width, value) {\n  return String(value).length * 8 > width\n}\n","import React from 'react'\nimport InputImpl from './InputImpl'\nimport InputAddonWrapper from './InputAddonWrapper'\n\nconst DSInput = ({\n  containerProps = {},\n  id,\n  autoFocus = false,\n  disabled = false,\n  className = '',\n  clearable = false,\n  name = '',\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  disableTooltip = true,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  customInputType = null,\n  variant,\n  isShowElipsisActive = true,\n  ...otherProps\n}) => {\n  return (\n    <InputImpl\n      {...otherProps}\n      aria-label={otherProps['aria-label']}\n      autoFocus={autoFocus}\n      className={className}\n      clearable={clearable}\n      containerProps={containerProps}\n      customInputType={customInputType}\n      data-testid={otherProps['data-testid'] || 'ds-input_main-component'}\n      disabled={disabled}\n      disableTooltip={disableTooltip}\n      fluidWidth={fluidWidth}\n      hasError={hasError}\n      id={id}\n      innerRef={innerRef}\n      isShowElipsisActive={isShowElipsisActive}\n      leftComponent={leftComponent}\n      max={max}\n      maxLength={maxLength}\n      min={min}\n      minLength={minLength}\n      name={name}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      required={required}\n      rightComponent={rightComponent}\n      type={type}\n      value={value}\n      variant={variant}\n    />\n  )\n}\n\nexport { InputAddonWrapper }\n\nexport default DSInput\n","/* eslint-disable */\nimport createIcon from './utils/createIcon'\n\nexport default createIcon({\n  paths: ['M15 10.5c0 3.038-2.462 5.5-5.5 5.5S4 13.538 4 10.5 6.462 5 9.5 5 15 7.462 15 10.5zm-2.672-2.121l-.707-.707L9.5 9.793 7.379 7.672l-.707.707L8.793 10.5l-2.121 2.121.707.707L9.5 11.207l2.121 2.121.707-.707-2.121-2.121 2.121-2.121z',],\n  height: 20,\n  width: 20,\n})\n","import React, { cloneElement } from 'react'\n\nexport default (children, extraProps = {}) => (\n  React.Children.map(children,\n    component => (component ? cloneElement(component, {\n      ...extraProps,\n      ...component.props,\n      className: `${component.props.className} toolbar-item`,\n    }) : component), null)\n)\n","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport { useFocusGroupItem } from '@elliemae/ds-shared/esm/FocusGroup'\nimport { Position } from '../Popper/positions'\n\nconst ToolbarItem = ({\n  icon,\n  labelText,\n  menu = undefined,\n  ...otherProps\n}) => {\n  const ref = useRef(null)\n\n  useFocusGroupItem(ref)\n  const btn = (\n    <DSButton\n      {...otherProps}\n      buttonType='text'\n      icon={icon}\n      innerRef={ref}\n      labelText={labelText}\n    />\n  )\n  if (menu) {\n    return React.cloneElement(menu, {\n      ...menu.props,\n      placement: Position.BOTTOM_END,\n      triggerComponent: btn,\n    })\n  }\n  return btn\n}\n\nToolbarItem.displayName = 'ToolbarItem'\n\nToolbarItem.propTypes = {\n  icon: PropTypes.element,\n  labelText: PropTypes.string,\n}\n\nexport default ToolbarItem\n","import React from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport decorateToolbarChildren from './decorateToolbarChildren'\n\nconst blockName = 'toolbar-group'\n\nconst ToolbarGroupContainer = aggregatedClasses('div')(blockName, null, ({ space }) => ({\n  [`space-${space}`]: !!space,\n}))\n\nconst ToolbarGroup = ({ children, size, space = 0 }) => {\n  return (\n    <ToolbarGroupContainer\n      classProps={{ space }}\n    >\n      {decorateToolbarChildren(children, { size })}\n    </ToolbarGroupContainer>\n  )\n}\n\nexport default ToolbarGroup\n","import { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'toolbar'\n\nconst ToolbarDivider = aggregatedClasses('div')(blockName, 'divider')\n\nToolbarDivider.displayName = 'ToolbarDivider'\n\nexport default ToolbarDivider\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DSInput from '@elliemae/ds-basic/form/Input'\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => {\n  return (\n    <DSInput\n      {...otherProps}\n      aria-label={otherProps['aria-label'] || 'Text Box'}\n      autoFocus={autoFocus}\n      clearable={clearable}\n      containerProps={containerProps}\n      disabled={disabled}\n      fluidWidth={fluidWidth}\n      hasError={hasError}\n      innerRef={innerRef}\n      leftComponent={leftComponent}\n      max={max}\n      maxLength={maxLength}\n      min={min}\n      minLength={minLength}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      required={required}\n      rightComponent={rightComponent}\n      role='textbox'\n      type={type}\n      value={value}\n      variant={variant}\n    />\n  )\n}\n\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n}\n\nexport default DSTextBox\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { aggregatedClasses, convertPropToCssClassName } from '@elliemae/ds-classnames'\nimport DSPopper, { PopperPositions, PopperInteractions } from '@elliemae/ds-basic/Popper'\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps'\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants'\nimport { TooltipType } from './TooltipType'\nimport { interactions } from '../Popper/interaction'\nimport { positions } from '../Popper/positions'\n\n\nconst blockName = 'tooltip'\n\nconst TooltipContainer = aggregatedClasses('div')(blockName)\nconst TooltipText = aggregatedClasses('span')(blockName, 'text')\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(blockName)\n\n  let Content = title\n  if (typeof title === 'string') {\n    Content = (\n      <TooltipText>\n        {title}\n      </TooltipText>\n    )\n  }\n\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={(\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      )}\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  )\n}\n\nDSTooltip.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Tooltip position */\n  placement: PropTypes.oneOf(positions),\n  /** Tooltip content */\n  title: PropTypes.string,\n  /** Delay to close the tooltip */\n  delayClose: PropTypes.string,\n  /** Delay to open the tooltip */\n  delayOpen: PropTypes.string,\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that will trigger the open/close interaction */\n  triggerComponent: PropTypes.element,\n  /** Whether the tooltip is visible or not */\n  isOpen: PropTypes.bool,\n  /** Handler when the tooltip opens */\n  onOpen: PropTypes.func,\n  /** Spring animation component */\n  springAnimationComponent: PropTypes.element,\n  /** Whether to show an arrow or not */\n  showArrow: PropTypes.bool,\n}\n\nexport { TooltipType }\nexport default DSTooltip\n","export const DEFAULT_DELAY_OPEN = 200\nexport const DEFAULT_DELAY_CLOSE = 300\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large']\n"],"sourceRoot":""}