{"version":3,"sources":["../../../src/form/LargeInputText/DSLargeInputText.js","FormItemLayout/LargeInputText.js"],"names":["CounterArea","DSLargeInputText","containerProps","autoFocus","className","disabled","name","id","maxLength","minLength","placeholder","onClick","onChange","onFocus","onBlur","onKeyUp","onKeyDown","onPaste","value","hasError","required","readOnly","resize","innerRef","ariaLabel","ariaAutocomplete","role","characterLimitCounter","rows","errorLimit","tabIndex","limitError","useMemo","String","convertPropToCssClassName","cssClassName","classNameElement","classNameBlock","ref","aria-autocomplete","aria-label","aria-multiline","aria-placeholder","aria-required","e","style","classProps","data-testid","PropTypes","string","useState","setValue","handleChange","target","height","feedbackMessage","inputComponent","labelText"],"mappings":"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","file":"static/js/21.27d1fb1a.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-autofocus */\nimport React, { useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { convertPropToCssClassName, aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst CounterArea = aggregatedClasses('div')('counter', 'textarea', ({ limitError }) => ({\n  'limit-error': limitError,\n}))\n\nconst DSLargeInputText = ({\n  containerProps = {},\n  autoFocus = false,\n  className = '',\n  disabled = false,\n  name = '',\n  id = null,\n  maxLength = null,\n  minLength = 0,\n  placeholder = '',\n  onClick = () => null,\n  onChange = () => null,\n  onFocus = () => null,\n  onBlur = () => null,\n  onKeyUp = () => null,\n  onKeyDown = () => null,\n  onPaste = () => null,\n  value = '',\n  hasError = false,\n  required = false,\n  readOnly = false,\n  resize = 'vertical',\n  innerRef = null,\n  ariaLabel = 'Enter text',\n  ariaAutocomplete = 'none',\n  role = 'textbox',\n  characterLimitCounter = 0,\n  rows = 3,\n  errorLimit = 'Please limit your entry to',\n  tabIndex = '',\n}) => {\n  const limitError = useMemo(() => {\n    return characterLimitCounter < String(value).length && characterLimitCounter > 0\n  }, [characterLimitCounter, value])\n  const { cssClassName, classNameElement, classNameBlock } = convertPropToCssClassName(\n    'form-element-textarea',\n    'text', {\n      hasError: limitError || hasError,\n      readOnly,\n      disabled,\n    })\n  // auto size when user types\n  const handleKeyUp = (e) => {\n    // const { target } = e\n    onKeyUp(e)\n    // if (e.key !== 'Enter') return\n    // target.style.cssText = 'height:auto; padding:0'\n    // target.style.cssText = `height: ${target.scrollHeight}px`\n  }\n  return (\n    <React.Fragment>\n      <div {...containerProps} className={`${cssClassName} ${className}`}>\n        <div className={classNameBlock('wrapper')}>\n          <textarea\n            ref={innerRef}\n            aria-autocomplete={ariaAutocomplete}\n            aria-label={ariaLabel}\n            aria-multiline\n            aria-placeholder={placeholder}\n            aria-required={required}\n            autoFocus={autoFocus}\n            className={classNameElement('textarea')}\n            disabled={disabled}\n            id={id}\n            maxLength={maxLength}\n            minLength={minLength}\n            name={name}\n            onBlur={onBlur}\n            onChange={onChange}\n            onClick={onClick}\n            onFocus={onFocus}\n            onKeyDown={onKeyDown}\n            onKeyUp={handleKeyUp}\n            onPaste={onPaste}\n            placeholder={placeholder}\n            role={role}\n            rows={String(rows)}\n            style={{\n              resize,\n            }}\n            value={value}\n            tabIndex={tabIndex}\n          />\n        </div>\n      </div>\n      {characterLimitCounter > 0 && (\n        <CounterArea classProps={{ limitError }} data-testid='counter-area'>\n          {`${limitError ? `${\n            errorLimit} ${characterLimitCounter} characters.   ` : ''\n          }${String(value).length} / ${characterLimitCounter}`}\n        </CounterArea>\n      )}\n    </React.Fragment>\n  )\n}\n\nDSLargeInputText.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Whether is disabled or not\n   */\n  disabled: PropTypes.bool,\n  name: PropTypes.string,\n  id: PropTypes.number,\n  /**\n   * Max length for text to be entered\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for text to be entered\n   */\n  minLength: PropTypes.number,\n  /**\n   * Placeholder for the text\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Allows a function that is triggered once the input text is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text is focused\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Allows a function that is triggered once in the input a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once a key is being pressed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text is pasted\n   */\n  onPaste: PropTypes.func,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the input text has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the input text is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * Whether the input text is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the input text style is vertical or not\n   */\n  resize: PropTypes.string,\n  innerRef: PropTypes.func,\n  ariaLabel: PropTypes.string,\n  ariaAutocomplete: PropTypes.string,\n  /**\n   * Type of input. Ex: textbox\n   */\n  role: PropTypes.string,\n  /**\n   * it will show a counter/limit if the value is greater than 0\n   */\n  characterLimitCounter: PropTypes.number,\n  /**\n   * Tab index html property.\n   */\n  tabIndex: PropTypes.string,\n}\n\nexport default DSLargeInputText\n","import React, { useState } from \"react\";\nimport DSLargeInputText from \"@elliemae/ds-basic/dslargeinputtext\";\nimport DSFormItemLayout from \"@elliemae/ds-basic/form/FormItem\";\n\nexport default () => {\n  const [value, setValue] = useState();\n  const handleChange = ({ target: { value } }) => setValue(value);\n  return (\n    <div>\n      <DSLargeInputText\n        characterLimitCounter={20}\n        containerProps={{ id: \"my-custom-id\" }}\n        maxLength={500}\n        onChange={handleChange}\n        rows={6}\n        value={value}\n      />\n      <div style={{ height: \"2rem\" }} />\n      <DSFormItemLayout\n        containerProps={{ id: \"my-custom-id\" }}\n        feedbackMessage=\"Some feedback from de user...\"\n        inputComponent={DSLargeInputText}\n        labelText=\"Label text\"\n        onChange={handleChange}\n        placeholder=\"Hint Text\"\n        value={value}\n      />\n    </div>\n  );\n};\n"],"sourceRoot":""}