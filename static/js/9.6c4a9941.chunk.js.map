{"version":3,"sources":["DataGrid/editableColumns.js","../../../../../src/form/Input/InputAddonWrapper.js","../../../../../src/form/Input/InputImpl.js","../../../../../src/form/Input/showEllipsis.js","../../../../../src/form/Input/DSInput.js","../../../src/CloseCircle.js","../../../src/form/TextBox/DSTextBox.js","../../../../src/Tooltip/TooltipType.js","../../../../src/Tooltip/DSTooltip.js","../../../src/constants.js"],"names":["options","value","label","property","editable","sortable","resizable","customEditor","onValue","rowData","autoFocus","menuIsOpen","onBlur","onChange","val","searchable","InputWrapper","aggregatedClasses","InputAddon","left","right","variant","InputAddonWrapper","components","this","renderAddonComponent","Array","comp","containerProps","classProps","component","key","index","className","innerRef","rightComponents","leftComponents","children","InputComponent","React","hasError","readOnly","disabled","rightAddon","getRightAddon","leftAddon","getLeftAddon","Component","Input","clearable","WrapperForTooltipInput","InputCustomWrapper","ClearableButton","getValidComponents","noop","InputImpl","width","active","showTooltip","e","onFocus","client","window","onClear","target","ref","current","focus","buttonType","data-testid","icon","onClick","handleClear","role","id","isShowElipsisActive","name","maxLength","minLength","placeholder","leftComponent","rightComponent","disableTooltip","onKeyDown","onKeyUp","onPaste","required","type","customInputType","min","max","onMouseLeave","onMouseOut","style","tabIndex","rest","filter","inputProps","autocomplete","onMouseEnter","String","showEllipsis","isOpen","title","zIndex","triggerComponent","PropTypes","props","Error","fluidWidth","undefined","otherProps","aria-label","createIcon","paths","height","DSTextBox","string","TooltipType","TooltipContainer","TooltipText","DSTooltip","placement","PopperPositions","TOP","delayClose","DEFAULT_DELAY_CLOSE","delayOpen","DEFAULT_DELAY_OPEN","interactionType","PopperInteractions","HOVER","onOpen","springAnimationComponent","tooltipType","showArrow","otherTooltipProps","tooltipBlockName","convertPropToCssClassName","Content","blockName","contentComponent","getComponentFromProps","bool"],"mappings":"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","file":"static/js/9.6c4a9941.chunk.js","sourcesContent":["import React from \"react\";\nimport DSComboBox from \"@elliemae/ds-basic/dscombobox\";\n\nconst options = [\n  { value: \"Borrower\", label: \"Borrower\" },\n  { value: \"Co-Borrower\", label: \"Co-Borrower\" },\n  { value: \"Both\", label: \"Both\" }\n];\n\nconst OwnerComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === \"Yes\")}\n      onChange={val => onValue(val, rowData)}\n      options={options}\n      value={value === \"Yes\"}\n    />\n  );\n};\n\nconst OverTimeComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === \"Yes\")}\n      onChange={val => onValue(val, rowData)}\n      options={options}\n      value={value === \"Yes\"}\n    />\n  );\n};\n\nexport default [\n  {\n    property: \"name\",\n    label: \"Name\",\n    editable: true,\n    sortable: true,\n    resizable: true\n  },\n  {\n    property: \"owner\",\n    label: \"Owner\",\n    editable: true,\n    resizable: true,\n    customEditor: OwnerComboBox\n  },\n  {\n    property: \"salary\",\n    label: \"Salary\",\n    editable: true,\n    searchable: true,\n    resizable: true\n  },\n  {\n    property: \"monthly\",\n    label: \"Monthly\",\n    editable: true,\n    resizable: true\n  },\n  {\n    property: \"overtime\",\n    label: \"Overtime\",\n    editable: true,\n    resizable: true,\n    customEditor: OverTimeComboBox\n  }\n];\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'input-addon-wrapper'\n\nconst InputWrapper = aggregatedClasses('div')(blockName)\nconst InputAddon = aggregatedClasses('span')(blockName, 'addon', ({ left, right, variant }) => ({\n  left,\n  right,\n  [variant]: variant,\n}))\n\n\nexport default class InputAddonWrapper extends Component {\n  static defaultProps = {\n    rightComponents: [],\n    leftComponents: [],\n    containerProps: {},\n  }\n  getLeftAddon(components) {\n    return this.renderAddonComponent(true, components)\n  }\n  getRightAddon(components) {\n    return this.renderAddonComponent(false, components)\n  }\n  renderAddonComponent(left = true, components) {\n    if (!components) return null\n    if (Array.isArray(components)) {\n      if (!components.filter(comp => comp).length) return null\n    }\n    const { containerProps } = this.props\n    const classProps = left\n      ? { left: true }\n      : { right: true }\n\n    return (\n      <InputAddon\n        classProps={classProps}\n        {...containerProps}\n      >\n        {components.map((component, index) => component\n          && React.cloneElement(component, { ...component.props, key: index }))}\n      </InputAddon>\n    )\n  }\n  render() {\n    const {\n      className,\n      innerRef,\n      rightComponents,\n      leftComponents,\n      children,\n      variant,\n      containerProps,\n    } = this.props\n\n    const InputComponent = React.Children.only(children)\n\n    const {\n      hasError,\n      readOnly,\n      disabled,\n    } = InputComponent.props\n\n    const rightAddon = this.getRightAddon([...rightComponents])\n    const leftAddon = this.getLeftAddon([...leftComponents])\n\n    return (\n      <InputWrapper\n        className={className}\n        classProps={{\n          hasError,\n          readOnly,\n          disabled,\n          variant,\n        }}\n        innerRef={innerRef}\n        {...containerProps}\n      >\n        {leftAddon}\n        {InputComponent}\n        {rightAddon}\n      </InputWrapper>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport CloseCircle from '@elliemae/ds-icons/CloseCircle';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTooltip from '@elliemae/ds-basic/Tooltip';\nimport InputAddonWrapper from './InputAddonWrapper';\nimport { showEllipsis } from './showEllipsis';\n\nconst blockName = 'input';\nconst Input = aggregatedClasses('input')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst WrapperForTooltipInput = aggregatedClasses('div')(\n  blockName,\n  'tooltip-ref',\n);\nconst InputCustomWrapper = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst ClearableButton = aggregatedClasses(DSButton)(blockName, 'clearable');\n\nconst getValidComponents = component => component;\n\nconst noop = () => null;\nclass InputImpl extends Component {\n  static defaultProps = {\n    onBlur: noop,\n    onFocus: noop,\n  };\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.refTooltip = React.createRef();\n  }\n  state = {\n    width: -1,\n    active: false,\n    showTooltip: false,\n  };\n  componentDidMount() {\n    this.setWidth();\n    window.addEventListener('resize', this.setWidth);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setWidth);\n  }\n  handleBlur = e => {\n    const { onBlur } = this.props;\n    onBlur(e);\n    this.setState({\n      active: false,\n    });\n  };\n  handleFocus = e => {\n    const { onFocus } = this.props;\n    onFocus(e);\n    this.setState({\n      active: true,\n    });\n  };\n  handleMouseEnter = () => {\n    this.setState({\n      showTooltip: true,\n    });\n  };\n  handleMouseLeave = () => {\n    this.setState({\n      showTooltip: false,\n    });\n  };\n  setWidth = () => {\n    const client = this.refTooltip.current.getBoundingClientRect();\n    this.setState({\n      width: client.width,\n    });\n  };\n  handleClear() {\n    const { onClear, onChange, clearable } = this.props;\n    if (clearable && onClear) {\n      onClear();\n    } else {\n      onChange({ target: { value: '' } });\n    }\n\n    if ((this.ref || {}).current) this.ref.current.focus();\n  }\n  renderClearableComponent() {\n    const { clearable, value, disabled } = this.props;\n    if (disabled) return null;\n    return clearable && value ? (\n      <ClearableButton\n        buttonType=\"text\"\n        data-testid=\"ds-input_clearable-btn\"\n        disabled={disabled}\n        icon={<CloseCircle />}\n        onClick={this.handleClear}\n      />\n    ) : null;\n  }\n  render() {\n    const {\n      role,\n      id,\n      isShowElipsisActive,\n      autoFocus,\n      className,\n      name,\n      innerRef,\n      maxLength,\n      minLength,\n      placeholder,\n      leftComponent,\n      rightComponent,\n      disableTooltip,\n      readOnly,\n      disabled,\n      value,\n      onClick,\n      onChange,\n      onKeyDown,\n      onKeyUp,\n      onFocus,\n      onBlur,\n      onPaste,\n      required,\n      type,\n      customInputType,\n      min,\n      max,\n      clearable,\n      onMouseLeave,\n      onMouseOut,\n      style,\n      containerProps,\n      tabIndex,\n      ...rest\n    } = this.props;\n    const { width, active, showTooltip } = this.state;\n    const rightComponents = [\n      this.renderClearableComponent(),\n      rightComponent,\n    ].filter(getValidComponents);\n    const leftComponents = [leftComponent].filter(getValidComponents);\n\n    const inputProps = {\n      'aria-label': rest['aria-label'],\n      'aria-placeholder': placeholder,\n      'aria-required': required,\n      'aria-multiline': false,\n      'aria-autocomplete': 'none',\n      'data-testid': rest['data-testid'],\n      role,\n      id,\n      ref: this.ref,\n      className,\n      autoFocus,\n      disabled: disabled || readOnly,\n      innerRef,\n      maxLength,\n      minLength,\n      name,\n      onBlur,\n      onChange,\n      onClick,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      onPaste,\n      onMouseLeave,\n      disableTooltip,\n      onMouseOut,\n      placeholder,\n      required,\n      type,\n      value,\n      min,\n      max,\n      style,\n      tabIndex,\n      ...containerProps,\n    };\n\n    let InputComponent = (\n      <WrapperForTooltipInput ref={this.refTooltip} style={{ width: '100%' }}>\n        {!customInputType ? (\n          <Input\n            {...inputProps}\n            autocomplete=\"off\"\n            clearable={clearable}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onMouseEnter={this.handleMouseEnter}\n            onMouseLeave={this.handleMouseLeave}\n            value={value}\n          />\n        ) : (\n          <InputCustomWrapper\n            {...containerProps}\n            clearable={clearable}\n            value={value}\n          >\n            {customInputType({\n              ...inputProps,\n            })}\n          </InputCustomWrapper>\n        )}\n      </WrapperForTooltipInput>\n    );\n    if (\n      showEllipsis(width, value) &&\n      !active &&\n      showTooltip &&\n      width &&\n      isShowElipsisActive\n    ) {\n      InputComponent = (\n        <DSTooltip\n          isOpen={disableTooltip}\n          title={String(value)}\n          zIndex={11}\n          triggerComponent={\n            <WrapperForTooltipInput style={{ width: '100%' }}>\n              {InputComponent}\n            </WrapperForTooltipInput>\n          }\n        />\n      );\n    }\n\n    const renderInput =\n      rightComponents.length || leftComponents.length || clearable ? (\n        <InputAddonWrapper\n          className={className}\n          leftComponents={leftComponents}\n          rightComponents={rightComponents}\n          {...containerProps}\n        >\n          {InputComponent}\n        </InputAddonWrapper>\n      ) : (\n        InputComponent\n      );\n\n    return renderInput;\n  }\n}\n\nInputImpl.propTypes = {\n  className: PropTypes.string,\n  customInputType: PropTypes.func,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isShowElipsisActive: PropTypes.bool,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onPaste: PropTypes.func,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  role: PropTypes.string,\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Should be of type string if using ellipsis tooltip [isShowElipsisActive] prop\n   */\n  value(props, propName, componentName) {\n    // eslint-disable-line consistent-return\n    if (!!props.isShowElipsisActive && typeof props[propName] !== 'string') {\n      return new Error(\n        `Invalid prop \\`${propName}\\` of type \\`${typeof props[\n          propName\n        ]}\\` supplied to` +\n          ` \\`${componentName}\\`. Prop \\`value\\` should be of type \\`string\\` if prop \\`isShowElipsisActive\\` is set to \\`true\\`.` +\n          ' Either set `isShowElipsisActive` to `false`, or properly format your `value` prop to `string`.',\n      );\n    }\n  },\n};\n\nexport default InputImpl;\n","export function showEllipsis(width, value) {\n  return String(value).length * 8 > width\n}\n","import React from 'react'\nimport InputImpl from './InputImpl'\nimport InputAddonWrapper from './InputAddonWrapper'\n\nconst DSInput = ({\n  containerProps = {},\n  id,\n  autoFocus = false,\n  disabled = false,\n  className = '',\n  clearable = false,\n  name = '',\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  disableTooltip = true,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  customInputType = null,\n  variant,\n  isShowElipsisActive = true,\n  ...otherProps\n}) => {\n  return (\n    <InputImpl\n      {...otherProps}\n      aria-label={otherProps['aria-label']}\n      autoFocus={autoFocus}\n      className={className}\n      clearable={clearable}\n      containerProps={containerProps}\n      customInputType={customInputType}\n      data-testid={otherProps['data-testid'] || 'ds-input_main-component'}\n      disabled={disabled}\n      disableTooltip={disableTooltip}\n      fluidWidth={fluidWidth}\n      hasError={hasError}\n      id={id}\n      innerRef={innerRef}\n      isShowElipsisActive={isShowElipsisActive}\n      leftComponent={leftComponent}\n      max={max}\n      maxLength={maxLength}\n      min={min}\n      minLength={minLength}\n      name={name}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      required={required}\n      rightComponent={rightComponent}\n      type={type}\n      value={value}\n      variant={variant}\n    />\n  )\n}\n\nexport { InputAddonWrapper }\n\nexport default DSInput\n","/* eslint-disable */\nimport createIcon from './utils/createIcon'\n\nexport default createIcon({\n  paths: ['M15 10.5c0 3.038-2.462 5.5-5.5 5.5S4 13.538 4 10.5 6.462 5 9.5 5 15 7.462 15 10.5zm-2.672-2.121l-.707-.707L9.5 9.793 7.379 7.672l-.707.707L8.793 10.5l-2.121 2.121.707.707L9.5 11.207l2.121 2.121.707-.707-2.121-2.121 2.121-2.121z',],\n  height: 20,\n  width: 20,\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DSInput from '@elliemae/ds-basic/form/Input'\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => {\n  return (\n    <DSInput\n      {...otherProps}\n      aria-label={otherProps['aria-label'] || 'Text Box'}\n      autoFocus={autoFocus}\n      clearable={clearable}\n      containerProps={containerProps}\n      disabled={disabled}\n      fluidWidth={fluidWidth}\n      hasError={hasError}\n      innerRef={innerRef}\n      leftComponent={leftComponent}\n      max={max}\n      maxLength={maxLength}\n      min={min}\n      minLength={minLength}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      required={required}\n      rightComponent={rightComponent}\n      role='textbox'\n      type={type}\n      value={value}\n      variant={variant}\n    />\n  )\n}\n\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n}\n\nexport default DSTextBox\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { aggregatedClasses, convertPropToCssClassName } from '@elliemae/ds-classnames'\nimport DSPopper, { PopperPositions, PopperInteractions } from '@elliemae/ds-basic/Popper'\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps'\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants'\nimport { TooltipType } from './TooltipType'\nimport { interactions } from '../Popper/interaction'\nimport { positions } from '../Popper/positions'\n\n\nconst blockName = 'tooltip'\n\nconst TooltipContainer = aggregatedClasses('div')(blockName)\nconst TooltipText = aggregatedClasses('span')(blockName, 'text')\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(blockName)\n\n  let Content = title\n  if (typeof title === 'string') {\n    Content = (\n      <TooltipText>\n        {title}\n      </TooltipText>\n    )\n  }\n\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={(\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      )}\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  )\n}\n\nDSTooltip.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Tooltip position */\n  placement: PropTypes.oneOf(positions),\n  /** Tooltip content */\n  title: PropTypes.string,\n  /** Delay to close the tooltip */\n  delayClose: PropTypes.string,\n  /** Delay to open the tooltip */\n  delayOpen: PropTypes.string,\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that will trigger the open/close interaction */\n  triggerComponent: PropTypes.element,\n  /** Whether the tooltip is visible or not */\n  isOpen: PropTypes.bool,\n  /** Handler when the tooltip opens */\n  onOpen: PropTypes.func,\n  /** Spring animation component */\n  springAnimationComponent: PropTypes.element,\n  /** Whether to show an arrow or not */\n  showArrow: PropTypes.bool,\n}\n\nexport { TooltipType }\nexport default DSTooltip\n","export const DEFAULT_DELAY_OPEN = 200\nexport const DEFAULT_DELAY_CLOSE = 300\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large']\n"],"sourceRoot":""}