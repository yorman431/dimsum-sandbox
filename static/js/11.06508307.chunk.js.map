{"version":3,"sources":["utils/randomData.js","DataGrid/editableColumns.js","DataGrid/PUI-2512.js","../../../src/form/ComboBox/v1/withSelectStringValueConverter.js","../../../src/utils/prop-types.js","../../../src/form/ComboBox/v1/components/Control.js","../../../src/form/ComboBox/v1/components/DropdownIndicator.js","../../../src/form/ComboBox/v1/components/SelectMenu.js","../../../src/form/ComboBox/v1/components/ClearIndicator.js","../../../src/form/ComboBox/v1/components/CustomOption.js","../../../src/form/ComboBox/v1/components/CustomOptionMulti.js","../../../src/form/ComboBox/v1/components/MultiSelectHeader.js","../../../src/form/ComboBox/v1/components/MenuList.js","../../../src/form/ComboBox/v1/components/MultiValueLabel.js","../../../src/form/ComboBox/v1/components/MultiValueRemove.js","../../../src/form/ComboBox/v1/components/SingleValueLabel.js","../../../src/form/ComboBox/v1/components/ValueContainer.js","../../../src/form/ComboBox/v1/DSComboBox.js","../../../src/form/ComboBox/v1/components/calculateWidth.js","../../../src/form/ComboBox/v2/components/DropdownIndicator.js","../../../src/form/ComboBox/v2/components/SelectMenu.js","../../../src/form/ComboBox/v2/components/Control.js","../../../src/form/ComboBox/v2/components/ClearIndicator.js","../../../src/form/ComboBox/v2/components/CustomOption.js","../../../src/form/ComboBox/v2/components/CustomOptionMulti.js","../../../src/form/ComboBox/v2/components/MultiSelectHeader.js","../../../src/form/ComboBox/v2/components/MenuList.js","../../../src/form/ComboBox/v2/components/MultiValueLabel.js","../../../src/form/ComboBox/v2/components/MultiValueRemove.js","../../../src/form/ComboBox/v2/components/SingleValueLabel.js","../../../src/form/ComboBox/v2/components/LoadingIndicator.js","../../../src/form/ComboBox/v2/components/ValueContainer.js","../../../src/form/ComboBox/v2/Combobox.js","../../../src/form/ComboBox/v2/components/calculateWidth.js"],"names":["groups","randomEntity","monthly","random","toFixed","id","uuidv4","group","name","owner","salary","overtime","bonuses","commission","other","text","inFolderE","randomEntities","count","Array","fill","map","randomGroupedEntities","entities","g","children","filter","entity","length","options","value","label","property","editable","sortable","resizable","customEditor","onValue","rowData","autoFocus","menuIsOpen","onBlur","onChange","val","searchable","rows","columns","editableColumns","searchFilters","autoHeight","resizeableColumns","findOption","valueProperty","index","option","getOptionFromValue","isMulti","withSelectStringValueConverter","WrappedComponent","this","nextProps","prevState","prevPropValue","labelProperty","COMBOBOX_VARIANT","comboBoxVariants","Control","props","ref","DropdownIndicator","innerRef","onKeyDown","rest","aria-label","buttonType","className","icon","SelectMenu","inlineMenu","bounds","expandMenuToContainer","expandMenuOutsideContainer","zIndex","styleMenu","width","containerProps","isOpen","modifiers","preventOverflow","enabled","padding","boundariesElement","placement","PopperPositions","BOTTOM_START","style","cx","visible","ClearIndicator","getStyles","aria-hidden","size","e","CustomOption","data","isScrolling","items","useTruncatedText","optionProps","onClick","get","innerProps","CustomOptionMulti","allSelected","checked","labelText","MultiSelectHeader","child","createItemData","memoize","scrollToKeyword","debounce","listRef","type","item","MenuList","useRef","useState","inside","setInside","handleKeyDown","useEffect","window","selectProps","customMenuItemOptions","itemSize","itemData","safeOptionLength","height","RenderOption","onMouseLeave","itemCount","onScroll","useIsScrolling","MultiValueLabel","tooltipPlacement","Positions","MultiValueRemove","SingleValueLabel","PropTypes","isRequired","ValueContainer","ThemeConstants","allOption","getValues","mOption","DSComboBox","undefined","isHover","focus","React","handleHoverRef","throttle","hideSelectedOptions","hasError","onFocus","filterOption","onClickDropdownIndicator","onInputKeyDown","onInputChange","isRtl","isFocused","showAllOption","clearable","disabled","placeholder","noOptionsMessage","customComponents","measureRef","contentRect","readOnly","returnValue","variant","restPropsToCustomizeSelect","internalOptions","internalValue","onMouseEnter","classNamePrefix","components","Menu","onMouseOverCapture","onKeyDownIndicator","onKeyDownClear","SingleValue","getOptionLabel","getOptionValue","isClearable","isDisabled","isSearchable","op","selectMeasure","styles","control","menu","longest","a","b","calculateWidth","dropdownIndicator","clearIndicator","indicatorSeparator","multiValue","base","background","minWidth","Component","inputValue","string","loading","maxOptions","number","withContentRect","theme","c","useContext","BUTTON_VARIANT","DEFAULT","TriggerComponent","aggregatedClasses","contentComponent","data-testid","showArrow","triggerComponent","restInnerProps","select","tabIndex","bottom","remainingHeight","maxOptionsScreen","calculatedHeight","innerPropsWithOutRemoval","onTouchEnd","onMouseDown","Wrapper","styled","LoadingIndicator","valueContainerRef","container","DropDownContext","inputInFocus","setFocus","menuOpen","setMenuOpen","isMultipleKeyPressed","setIsMultipleKeyPressed","handleInputChange","useCallback","action","handleOnKeyDown","event","handleFocus","handleBlur","removeDropdownIndicator","closeMenuOnSelect","singleValue","provided","maxWidth","multiValueLabel","backgroundColor","multiValueRemove","color","valueContainer","flexWrap","tabSelectsValue"],"mappings":"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","file":"static/js/11.06508307.chunk.js","sourcesContent":["import { random } from \"lodash\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst groups = [\"North\", \"South\", \"East\", \"West\"];\n\nexport const randomEntity = () => {\n  const monthly = random(1500, 3500, true).toFixed(2);\n  const id = uuidv4();\n  const group = groups[random(0, 3)];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? \"John Doe\" : \"Jon Snow\"} ${id}`,\n    owner: [\"Borrower\", \"Co-Borrower\", \"Both\"][random(0, 2)],\n    salary: (monthly * 12).toFixed(2),\n    monthly,\n    overtime: random(20, 800, true).toFixed(2),\n    bonuses: random(20, 500, true).toFixed(2),\n    commission: random(20, 25000, true).toFixed(2),\n    other: random(20, 1000, true).toFixed(2),\n    text: \"Some random very long text\",\n    inFolderE: random(0, 1) > 0,\n    group\n  };\n};\nexport const randomEntities = count =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity();\n  });\nexport const randomGroupedEntities = count => {\n  const entities = randomEntities(count);\n  return groups\n    .map(g => ({\n      group: g,\n      children: entities.filter(entity => entity.group === g)\n    }))\n    .filter(g => g.children.length);\n};\n","import React from \"react\";\nimport DSComboBox from \"@elliemae/ds-basic/dscombobox\";\n\nconst options = [\n  { value: \"Borrower\", label: \"Borrower\" },\n  { value: \"Co-Borrower\", label: \"Co-Borrower\" },\n  { value: \"Both\", label: \"Both\" }\n];\n\nconst OwnerComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === \"Yes\")}\n      onChange={val => onValue(val, rowData)}\n      options={options}\n      value={value === \"Yes\"}\n    />\n  );\n};\n\nconst OverTimeComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === \"Yes\")}\n      onChange={val => onValue(val, rowData)}\n      options={options}\n      value={value === \"Yes\"}\n    />\n  );\n};\n\nexport default [\n  {\n    property: \"name\",\n    label: \"Name\",\n    editable: true,\n    sortable: true,\n    resizable: true\n  },\n  {\n    property: \"owner\",\n    label: \"Owner\",\n    editable: true,\n    resizable: true,\n    customEditor: OwnerComboBox\n  },\n  {\n    property: \"salary\",\n    label: \"Salary\",\n    editable: true,\n    searchable: true,\n    resizable: true\n  },\n  {\n    property: \"monthly\",\n    label: \"Monthly\",\n    editable: true,\n    resizable: true\n  },\n  {\n    property: \"overtime\",\n    label: \"Overtime\",\n    editable: true,\n    resizable: true,\n    customEditor: OverTimeComboBox\n  }\n];\n","import React from \"react\";\nimport { DSDataGrid } from \"@elliemae/ds-datagrids\";\nimport editableColumns from \"./editableColumns\";\nimport { randomEntities } from \"../utils/randomData\";\n\nconst rows = randomEntities(5);\n\nexport default () => {\n  return (\n    <DSDataGrid\n      columns={editableColumns}\n      rows={rows}\n      searchFilters\n      sortable\n      editable\n      autoHeight\n      resizeableColumns\n      // onColumnRowEdited={editRowColumn}\n    />\n  );\n};\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react'\n\nconst findOption = (options, valueProperty = 'value') => (value) => {\n  if (typeof value === 'object') return value\n  const index = options.findIndex(option => option[valueProperty] === value)\n  return options[index]\n}\n\nconst getOptionFromValue = ({\n  value,\n  options,\n  valueProperty,\n  isMulti,\n}) => {\n  if (Array.isArray(value) && isMulti) {\n    return value.map(findOption(options, valueProperty))\n  }\n  return findOption(options, valueProperty)(value)\n}\n\nconst withSelectStringValueConverter = WrappedComponent => (class extends Component {\n  static defaultProps = {\n    valueProperty: 'value',\n    labelProperty: 'label',\n  }\n  state = {}\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (typeof nextProps.value !== 'undefined' && nextProps.value !== prevState.prevPropValue) {\n      return {\n        prevPropValue: nextProps.value,\n        value: getOptionFromValue(nextProps),\n      }\n    }\n    return null\n  }\n  render() {\n    const { value } = this.state\n    return (\n      <WrappedComponent\n        {...this.props}\n        value={value}\n      />\n    )\n  }\n})\n\nexport default withSelectStringValueConverter\n","export const BUTTON_TYPE = {\n  PRIMARY: 'primary',\n  SECONDARY: 'secondary',\n  TEXT: 'text',\n  LINK: 'link',\n}\n\nexport const buttonTypes = [\n  'primary',\n  'secondary',\n  'text',\n  'link',\n]\n\nexport const BUTTON_SIZE = {\n  S: 's',\n  M: 'm',\n  L: 'l',\n}\n\nexport const BUTTON_INTENT = {\n  DANGER: 'danger',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  INFO: 'info',\n}\n\nexport const BUTTON_VARIANT = {\n  DEFAULT: 'variant-default',\n  FOCUS: 'variant-focus',\n  ACTIVE: 'variant-active',\n  DISABLED: 'variant-disabled',\n}\n\nexport const CHECKBOX_VARIANT = {\n  DEFAULT: 'variant-default',\n  FOCUS: 'variant-focus',\n  ACTIVE: 'variant-active',\n  DISABLED: 'variant-disabled',\n  ERROR: 'variant-error',\n}\nexport const checkboxVariants = [\n  CHECKBOX_VARIANT.DEFAULT,\n  CHECKBOX_VARIANT.FOCUS,\n  CHECKBOX_VARIANT.ACTIVE,\n  CHECKBOX_VARIANT.DISABLED,\n  CHECKBOX_VARIANT.ERROR,\n]\n\nexport const COMBOBOX_VARIANT = {\n  DEFAULT: 'variant-default',\n  FOCUS: 'variant-focus-input',\n  FOCUS_ICON: 'variant-focus-icon',\n  ACTIVE: 'variant-active-input',\n  ACTIVE_ICON: 'variant-active-icon',\n  DISABLED: 'variant-disabled',\n  ERROR: 'variant-error',\n}\n\nexport const comboBoxVariants = [\n  COMBOBOX_VARIANT.DEFAULT,\n  COMBOBOX_VARIANT.FOCUS,\n  COMBOBOX_VARIANT.FOCUS_ICON,\n  COMBOBOX_VARIANT.ACTIVE,\n  COMBOBOX_VARIANT.ACTIVE_ICON,\n  COMBOBOX_VARIANT.DISABLED,\n  COMBOBOX_VARIANT.ERROR,\n]\n\nexport const buttonVariants = [\n  'variant-default',\n  'variant-focus',\n  'variant-active',\n  'variant-disabled',\n]\n\n\nexport const sizes = ['s', 'm', 'l']\n\nexport const orientation = ['horizontal', 'vertical']\n","import React from 'react'\nimport { components } from 'react-select'\nimport { Reference } from 'react-popper'\n\nconst Control = (props) => {\n  return (\n    <Reference>\n      { ({ ref }) => (\n        <div ref={ref}>\n          <components.Control {...props} />\n        </div>\n      ) }\n    </Reference>\n  )\n}\n\nexport default Control\n","import React from 'react'\nimport ChevronSmallDown from '@elliemae/ds-icons/ChevronSmallDown'\nimport DSButton from '@elliemae/ds-basic/Button'\n\nconst DropdownIndicator = ({ innerRef, onKeyDown, ...rest }) => (\n  <DSButton\n    aria-label='dropdown-indicator'\n    buttonType='text'\n    className='dropdown-indicator'\n    icon={<ChevronSmallDown />}\n    innerRef={innerRef}\n    onKeyDown={onKeyDown}\n    {...rest}\n  />\n)\n\nexport default DropdownIndicator\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react'\nimport DSOverlay from '@elliemae/ds-basic/Overlay'\nimport { cx } from '@elliemae/ds-utilities/utils'\nimport { components } from 'react-select'\nimport { Popper } from 'react-popper'\nimport { PopperPositions } from '@elliemae/ds-basic/Popper'\n\n// todo: the dropdown menu should be separated to a basic component and then import it here\n// use this for the moment but this needs to be changed\nimport { Menu } from '@elliemae/ds-basic/Menu'\n\n\nconst SelectMenu = React.memo((props) => {\n  const {\n    inlineMenu,\n    selectMeasure: { bounds },\n    expandMenuToContainer,\n    expandMenuOutsideContainer,\n    zIndex,\n  } = props.selectProps\n\n  if (inlineMenu) {\n    return (\n      <components.Menu {...props} />\n    )\n  }\n\n  const styleMenu = expandMenuToContainer ? { width: bounds.width } : {}\n  if (expandMenuOutsideContainer) {\n    styleMenu.width = 'auto'\n  }\n\n  return (\n    <DSOverlay\n      containerProps={{\n        className: 'combobox-menu-overlay',\n      }}\n      isOpen\n    >\n      <Popper\n        containerProps={{\n          className: 'combobox-menu-overlay-popper',\n        }}\n        modifiers={{ preventOverflow: { enabled: true, padding: 0, boundariesElement: 'window' } }}\n        placement={PopperPositions.BOTTOM_START}\n      >\n        {({ ref, style }) => (\n          <div\n            ref={ref}\n            className={cx(\n              'combobox-menu-wrapper-external',\n              expandMenuOutsideContainer && 'combobox-menu-wrapper-external-outside-container',\n\n            )}\n            style={{ zIndex: zIndex, ...style, ...(expandMenuOutsideContainer ? { width: 'auto' } : {}) }}\n          >\n            <Menu\n              className={cx(\n                'combobox-menu-menu',\n                expandMenuOutsideContainer && 'combobox-menu-menu-external-outside-container',\n              )}\n              style={styleMenu}\n              visible\n            >\n              <components.Menu {...props} />\n            </Menu>\n          </div>\n        )}\n      </Popper>\n    </DSOverlay>\n  )\n})\n\nexport default SelectMenu\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react'\nimport CloseCircle from '@elliemae/ds-icons/CloseCircle'\nimport DSButton from '@elliemae/ds-basic/Button'\n\nconst ClearIndicator = (props) => {\n  const {\n    getStyles,\n    innerProps: { ref },\n    innerRef,\n  } = props\n  return (\n    <div\n      ref={ref}\n      aria-hidden='false'\n      style={getStyles('clearIndicator', props)}\n    >\n      <DSButton\n        aria-label='clear-indicator'\n        buttonType='text'\n        className='clear-indicator'\n        icon={<CloseCircle size='m' />}\n        innerRef={innerRef}\n        onKeyDown={(e) => {\n          if (e.keyCode === 32 || e.keyCode === 13) {\n            e.preventDefault()\n            props.clearValue()\n          }\n          props.onKeyDown(e)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default ClearIndicator\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react'\nimport { get } from 'lodash'\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText'\n\nconst CustomOption = ({\n  index,\n  data,\n  style,\n  isScrolling,\n}) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data\n  const option = items[index]\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    onClick: (e) => {\n      e.stopPropagation()\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e)\n    },\n  }\n  if (useTruncatedText && !isScrolling && get(option, 'props.selectProps.menuIsOpen')) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    )\n  }\n  return React.cloneElement(option, {\n    ...option.props,\n    innerProps: optionProps,\n  })\n}\n\nexport default CustomOption\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react'\nimport DSTruncatedTooltipText from \"@elliemae/ds-basic/TruncatedTooltipText\"\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox'\n\nconst CustomOptionMulti = ({\n  index,\n  data,\n  style,\n  isScrolling,\n}) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data\n  const option = items[index]\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    onClick: (e) => {\n      e.stopPropagation()\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e)\n    },\n  }\n  if (useTruncatedText && !isScrolling) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    )\n  }\n\n  let allSelected = false\n  if (option.props.value === 'SELECT_ALL_COMBOBOX') {\n    if (option.props.selectProps.value.length === option.props.selectProps.options.length - 1\n      || option.props.selectProps.value.length === option.props.selectProps.options.length) {\n      allSelected = true\n    }\n  }\n  return React.cloneElement(option, {\n    ...option.props,\n    innerProps: optionProps,\n    children: (\n      <div>\n        <DSCheckbox checked={option.props.isSelected || allSelected} labelText={option.props.children} />\n      </div>\n    ),\n  })\n}\n\nexport default CustomOptionMulti\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react'\n\nconst MultiSelectHeader = (props) => {\n  const count = props.children.filter(child => child.props.isSelected).length\n  return (\n    <div className='combobox-multi-select-header'>\n      {`${count} selected`}\n    </div>\n  )\n}\n\nexport default MultiSelectHeader\n","/* eslint-disable jsx-a11y/mouse-events-have-key-events */\n/* eslint-disable max-statements */\nimport React, { useRef, useState, useEffect } from 'react'\nimport { components } from 'react-select'\nimport { FixedSizeList as List } from 'react-window'\nimport memoize from 'memoize-one'\nimport { debounce } from 'lodash'\nimport CustomOption from './CustomOption'\nimport CustomOptionMulti from './CustomOptionMulti'\nimport MultiSelectHeader from './MultiSelectHeader'\n// import AllOption from './AllOption'\n\nconst createItemData = memoize((items, options) => ({\n  items,\n  options,\n}))\n\nconst scrollTo = (listRef, type) => {\n  if (listRef && listRef.current && listRef.current.props) {\n    const { items } = listRef.current.props.itemData\n    const index = items.findIndex(item => item.props.isFocused)\n    listRef.current.scrollToItem(index, type)\n  }\n}\n// const scrollToMouse = debounce(scrollTo, 500)\nconst scrollToKeyword = debounce(scrollTo, 50)\n\nconst MenuList = (props) => {\n  const listRef = useRef(null)\n  const [inside, setInside] = useState(false)\n  const handleKeyDown = () => {\n    setInside(false)\n  }\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  })\n  const {\n    children: options,\n    selectProps,\n    isMulti,\n  } = props\n  const { customMenuItemOptions } = selectProps\n  const { itemSize = 35 } = customMenuItemOptions\n  const itemData = createItemData(options, customMenuItemOptions)\n  const maxOptionsScreen = 10\n  const safeOptionLength = options.length || 1\n  const height = itemSize * (safeOptionLength < maxOptionsScreen ? safeOptionLength : maxOptionsScreen)\n  const RenderOption = !isMulti ? CustomOption : CustomOptionMulti\n  if (!options.length) return <components.MenuList {...props} />\n\n  if (listRef && listRef.current && !inside) {\n    scrollToKeyword(listRef, 'center') // use autoScroll\n  }\n  return (\n    <div\n      onMouseLeave={() => {\n        setInside(false)\n      }}\n    >\n      {isMulti && <MultiSelectHeader {...props} />}\n      {/* {isMulti && <AllOption {...props} />} */}\n      <List\n        ref={listRef}\n        className={`combobox-menu-list ${isMulti && 'combobox-menu-list-is-multi'}`}\n        height={height}\n        itemCount={options.length}\n        itemData={itemData}\n        itemSize={itemSize}\n        onScroll={() => {\n          setInside(true)\n        }}\n        useIsScrolling\n      >\n        {RenderOption}\n      </List>\n    </div>\n  )\n}\nexport default MenuList\n","import React from 'react'\nimport DSTruncatedTooltipText from \"@elliemae/ds-basic/TruncatedTooltipText\"\nimport { PopperPositions as Positions } from \"@elliemae/ds-basic/Popper\"\n\nfunction MultiValueLabel({ children }) {\n  return <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n}\n\nexport default MultiValueLabel\n","import React from 'react'\nimport { get } from 'lodash'\nimport { components } from 'react-select'\n\nfunction MultiValueRemove(props) {\n  const value = get(props, 'selectProps.value')\n  if (Array.isArray(value) && value.length > 1) {\n    return <components.MultiValueRemove {...props}>,</components.MultiValueRemove>\n  }\n  return <components.MultiValueRemove {...props}>{' '}</components.MultiValueRemove>\n}\n\nexport default MultiValueRemove\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DSTruncatedTooltipText from \"@elliemae/ds-basic/TruncatedTooltipText\"\nimport { PopperPositions as Positions } from \"@elliemae/ds-basic/Popper\"\n\nfunction SingleValueLabel({ children }) {\n  return <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n}\n\nSingleValueLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n}\nexport default SingleValueLabel\n","/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\nimport React from 'react'\nimport { components } from 'react-select'\n\nexport function ValueContainer({ children, ...rest }) {\n  return (\n    <div className='combobox-value-container'>\n      <components.ValueContainer {...rest}>\n        {children}\n      </components.ValueContainer>\n    </div>\n  )\n}\n\nexport default ValueContainer\n","/* eslint-disable max-lines */\n/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce, throttle } from 'lodash';\nimport Select from 'react-select';\nimport { Manager } from 'react-popper';\nimport { withContentRect } from 'react-measure';\nimport { cx } from '@elliemae/ds-utilities/utils';\nimport withSelectStringValueConverter from './withSelectStringValueConverter';\nimport { COMBOBOX_VARIANT, comboBoxVariants } from '../../../utils/prop-types';\nimport Control from './components/Control';\nimport DropdownIndicator from './components/DropdownIndicator';\nimport SelectMenu from './components/SelectMenu';\nimport ClearIndicator from './components/ClearIndicator';\nimport MenuList from './components/MenuList';\nimport MultiValueLabel from './components/MultiValueLabel';\nimport MultiValueRemove from './components/MultiValueRemove';\nimport SingleValueLabel from './components/SingleValueLabel';\nimport { calculateWidth } from './components/calculateWidth';\nimport { ValueContainer } from './components/ValueContainer';\n\n// todo: use convertClassPropsTo....\nconst ThemeConstants = {\n  prefix: 'em-ds',\n};\n\nconst blockName = 'selectbox';\nconst allOption = { value: 'SELECT_ALL_COMBOBOX', label: 'All' };\n\nconst getValues = (option, isMulti, valueProperty) => {\n  if (!option) return null;\n  return isMulti\n    ? option.map(mOption => mOption[valueProperty])\n    : option[valueProperty];\n};\n\nclass DSComboBox extends React.Component {\n  forceFocus = false;\n  isHover = undefined;\n  handleHover = debounce(value => {\n    if (this.state.isHover === this.isHover) return;\n    if (!this.unmount) this.setState({ isHover: value });\n  }, 0);\n  static defaultProps = {\n    showAllOption: false,\n  };\n  constructor(props) {\n    super(props);\n    this.clear = React.createRef();\n    this.arrow = React.createRef();\n    this.select = React.createRef();\n  }\n  state = {\n    focus: null,\n    isHover: undefined,\n  };\n  componentDidMount() {\n    const { handleHoverRef } = this.props;\n    if (handleHoverRef) handleHoverRef(this.handleHoverRef);\n    window.addEventListener(\n      'scroll',\n      throttle(this.handleOutsideScroll, 300),\n      true,\n    );\n  }\n  componentWillUnmount() {\n    this.unmount = true;\n    window.removeEventListener(\n      'scroll',\n      throttle(this.handleOutsideScroll, 300),\n      true,\n    );\n  }\n  handleOutsideScroll = () => {\n    if (this.isHover !== true && !this.unmount) {\n      this.isHover = false;\n      this.handleHover(false);\n    }\n  };\n  handleHoverRef = value => {\n    this.isHover = value;\n    this.handleHover(value);\n  };\n  // onKeyDownIndicator = (e) => {\n  //   if (e.key === 'ArrowLeft') {\n  //     if (this.clear && this.clear.focus) this.clear.focus()\n  //     else this.select.focus()\n  //   }\n  // }\n  onKeyDownClear = e => {\n    // if (e.key === 'ArrowRight') {\n    //   this.arrow.focus()\n    // } else if (e.key === 'ArrowLeft') {\n    //   this.select.focus()\n    // }\n    if (e.keyCode === 32 || e.keyCode === 13) {\n      this.select.focus();\n    }\n  };\n  handleKeyDown = e => {\n    // if (e.key === 'ArrowRight') e.preventDefault()\n    // if (e.target.type === 'text' && e.key === 'ArrowRight') {\n    //   if (this.clear && this.clear.focus) {\n    //     this.clear.focus()\n    //   } else {\n    //     this.arrow.focus()\n    //   }\n    // }\n    if (e.target.type === 'text' && e.key === 'Backspace') {\n      this.select.focus();\n    }\n    return () => {\n      const { value } = e.target;\n      if (!value && e.key === ' ') e.preventDefault();\n      this.props.onKeyDown(e);\n    };\n  };\n  render() {\n    const {\n      hideSelectedOptions = false,\n      autoFocus = false,\n      className = '',\n      hasError = false,\n      onFocus = () => null,\n      onBlur = () => null,\n      onChange = () => null,\n      // onKeyDown = () => null,\n      filterOption = undefined,\n      onClickDropdownIndicator = () => null,\n      onInputKeyDown = () => null,\n      onInputChange = undefined,\n      isRtl = false,\n      isFocused = undefined,\n      isMulti = false,\n      showAllOption = false,\n      value = null,\n      options = [],\n      clearable = false,\n      searchable = true,\n      disabled = false,\n      placeholder = '',\n      valueProperty = 'value',\n      labelProperty = 'label',\n      menuIsOpen = undefined,\n      inlineMenu = false,\n      noOptionsMessage = () => <span>No options</span>,\n      components: customComponents = {},\n      measureRef,\n      contentRect,\n      readOnly = false,\n      expandMenuToContainer = true,\n      expandMenuOutsideContainer = false,\n      customMenuItemOptions = {\n        useTruncatedText: false,\n        itemSize: 35,\n      },\n      returnValue = true,\n      variant = COMBOBOX_VARIANT.DEFAULT,\n      containerProps = {},\n      zIndex = 11,\n      ...restPropsToCustomizeSelect\n    } = this.props;\n    const { focus } = this.state;\n    let internalOptions = options;\n    let internalValue = value;\n    if (showAllOption && isMulti) {\n      internalOptions = [allOption, ...options];\n    }\n    if (this.allSelected && isMulti) {\n      internalValue = [allOption, ...value];\n    }\n    return (\n      <Manager>\n        <div\n          ref={measureRef}\n          className={cx(\n            `${ThemeConstants.prefix}-${blockName}-wrapper`,\n            className,\n            hasError &&\n              `${ThemeConstants.prefix}-${blockName}--${COMBOBOX_VARIANT.ERROR}`,\n            `${ThemeConstants.prefix}-${blockName}--${variant}`,\n            `focus-${focus}`,\n            isMulti && 'combo-multi',\n            expandMenuOutsideContainer && 'expanded-outside-container',\n          )}\n          {...containerProps}\n          onMouseEnter={() => {\n            this.handleHoverRef(undefined);\n          }}\n        >\n          <Select\n            ref={ref => {\n              this.select = ref;\n            }}\n            autoFocus={autoFocus}\n            classNamePrefix={`${ThemeConstants.prefix}-${blockName}`}\n            components={{\n              Control,\n              Menu:\n                !options || options.length === 0\n                  ? SelectMenu\n                  : props => (\n                      <div\n                        className={`select-menu-combo ${isMulti &&\n                          'select-menu-combo-multi'}`}\n                        onMouseLeave={() => {\n                          this.isHover = undefined;\n                          this.handleHover(undefined);\n                        }}\n                        onMouseOverCapture={() => {\n                          this.isHover = true;\n                          this.handleHover(true);\n                        }}\n                      >\n                        <SelectMenu {...props} />\n                      </div>\n                    ),\n              // Menu: SelectMenu,\n              DropdownIndicator: () => (\n                <DropdownIndicator\n                  innerRef={ref => {\n                    this.arrow = ref;\n                  }}\n                  onClick={onClickDropdownIndicator}\n                  onKeyDown={this.onKeyDownIndicator}\n                />\n              ),\n              ClearIndicator: props => (\n                <ClearIndicator\n                  {...props}\n                  innerRef={ref => {\n                    this.clear = ref;\n                  }}\n                  onKeyDown={this.onKeyDownClear}\n                />\n              ),\n              MultiValueLabel,\n              MultiValueRemove,\n              SingleValue: SingleValueLabel,\n              MenuList,\n              ValueContainer,\n              ...customComponents,\n            }}\n            customMenuItemOptions={customMenuItemOptions}\n            expandMenuOutsideContainer={expandMenuOutsideContainer}\n            expandMenuToContainer={expandMenuToContainer}\n            filterOption={filterOption}\n            getOptionLabel={option => option[labelProperty]}\n            getOptionValue={option => option[valueProperty]}\n            hideSelectedOptions={hideSelectedOptions}\n            inlineMenu={inlineMenu}\n            isClearable={clearable}\n            isDisabled={disabled || readOnly}\n            isFocused={isFocused}\n            isMulti={isMulti}\n            isRtl={isRtl}\n            isSearchable={readOnly ? false : searchable}\n            menuIsOpen={menuIsOpen === undefined ? this.isHover : menuIsOpen}\n            noOptionsMessage={(...args) => {\n              noOptionsMessage(...args);\n            }}\n            onBlur={onBlur}\n            onChange={\n              returnValue\n                ? (option, action) => {\n                    this.allSelected = false;\n                    this.isHover = undefined;\n                    this.setState({ isHover: undefined });\n                    if (\n                      showAllOption &&\n                      isMulti &&\n                      option.find(op => op.value === 'SELECT_ALL_COMBOBOX')\n                    ) {\n                      this.allSelected = true;\n                      return onChange(\n                        getValues(options, isMulti, valueProperty),\n                        action,\n                      );\n                    }\n                    return onChange(\n                      getValues(option, isMulti, valueProperty),\n                      action,\n                    );\n                  }\n                : (option, action) => {\n                    this.allSelected = false;\n                    this.isHover = undefined;\n                    this.setState({ isHover: undefined });\n                    if (\n                      showAllOption &&\n                      isMulti &&\n                      option.find(op => op.value === 'SELECT_ALL_COMBOBOX')\n                    ) {\n                      this.allSelected = true;\n                      return onChange(options, action);\n                    }\n                    return onChange(option, action);\n                  }\n            }\n            onFocus={onFocus}\n            onInputChange={onInputChange}\n            onInputKeyDown={onInputKeyDown}\n            onKeyDown={this.handleKeyDown}\n            options={internalOptions}\n            placeholder={placeholder}\n            selectMeasure={contentRect}\n            styles={{\n              control: () => null,\n              menu: () => {\n                if (expandMenuOutsideContainer) {\n                  const width = calculateWidth(options);\n                  if (!width) return null;\n                  return {\n                    width: `${width}px`,\n                  };\n                }\n                return null;\n              },\n              option: () => null,\n              dropdownIndicator: () => null,\n              clearIndicator: () => null,\n              placeholder: () => null,\n              indicatorSeparator: () => null,\n              multiValue: base => ({\n                ...base,\n                background: 'none',\n                minWidth: '3rem',\n              }),\n            }}\n            value={internalValue}\n            zIndex={zIndex}\n            {...restPropsToCustomizeSelect}\n          />\n        </div>\n      </Manager>\n    );\n  }\n}\n\nDSComboBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  handleHoverRef: PropTypes.func,\n  /**\n   * Whether the combo box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Whether the combo box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the combo box is focused\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Allows a function that is triggered once a key is being pressed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input key down\n   */\n  onInputKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input changes\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Whether the combo box is rtl or not  //ASK\n   */\n  isRtl: PropTypes.bool,\n  /**\n   * Whether the combo box is focused or not\n   */\n  isFocused: PropTypes.bool,\n  /**\n   * Whether the combo box is multi or not\n   */\n  isMulti: PropTypes.bool,\n  inputValue: PropTypes.string,\n  showAllOption: PropTypes.bool,\n  allOption: PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string,\n  }),\n  /**\n   * Value that the combo box has as default\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Value that the combo box has as default\n   */\n  options: PropTypes.array,\n  /**\n   * Whether the combo box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Whether the combo box is searchable or not. Set to false makes the input non-editable\n   */\n  searchable: PropTypes.bool,\n  /**\n   * Whether the combo box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Placeholder for the combo box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Displays a Loading Indicator in the menu\n   */\n  loading: PropTypes.bool,\n  valueProperty: PropTypes.string,\n  labelProperty: PropTypes.string,\n  /**\n   * Whether the combo box menu is open or not\n   */\n  menuIsOpen: PropTypes.bool,\n  /**\n   * Whether to show the combo box menu inline or not\n   */\n  inlineMenu: PropTypes.bool,\n  /**\n   * Message to show once there aren't any options\n   */\n  noOptionsMessage: PropTypes.func,\n  /**\n   * Components you can add to the combo box\n   */\n  measureRef: PropTypes.func,\n  /**\n   * Whether the combo box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the combo box can be expanded the menu to container or not\n   */\n  expandMenuToContainer: PropTypes.bool,\n  /**\n   * Allow have options larger than his container\n   */\n  expandMenuOutsideContainer: PropTypes.bool,\n  /**\n   * Custom combo box menu item options\n   */\n  customMenuItemOptions: PropTypes.object,\n  /**\n   * Whether the combo box is has value to return or not\n   */\n  returnValue: PropTypes.bool,\n  /**\n    [\n      'variant-default',\n      'variant-focus-input',\n      'variant-focus-icon',\n      'variant-active-input',\n      'variant-active-icon',\n      'variant-disabled',\n      'variant-error',\n    ]\n   */\n  variant: PropTypes.oneOf(comboBoxVariants),\n  hideSelectedOptions: PropTypes.bool,\n  maxOptions: PropTypes.number,\n  /**\n   * Custom method to filter whether an option should be displayed in the menu\n   */\n  filterOption: PropTypes.func,\n  onClickDropdownIndicator: PropTypes.func,\n  /**\n   * Object with custom components for react-select\n   */\n  components: PropTypes.object,\n  contentRect: PropTypes.object,\n  zIndex: PropTypes.number,\n};\n\nexport { components } from 'react-select';\nexport { COMBOBOX_VARIANT };\nexport default withSelectStringValueConverter(\n  withContentRect('bounds')(DSComboBox),\n);\n","const letterFactor = 6\nconst fixedSpace = 48\nexport function calculateWidth(options) {\n  const longest = options.reduce((a, b) => {\n    if (a && a.label && b && b.label) return a.label.length > b.label.length ? a : b\n    return 0\n  })\n  if (longest && longest.label && longest.label.length) {\n    return longest.label.length * letterFactor + fixedSpace\n  }\n  return 0\n}\n","import React, { useContext } from 'react'\nimport { get } from 'lodash'\nimport ChevronSmallDown from '@elliemae/ds-icons/ChevronSmallDown'\nimport DSButton, { BUTTON_VARIANT } from '@elliemae/ds-basic/Button'\nimport { DropDownContext } from '../Combobox'\n\nconst DropdownIndicator = ({\n  innerRef, onKeyDown, options, theme, ...rest }) => {\n  const c = useContext(DropDownContext)\n  return (\n    <DSButton\n      aria-label='dropdown-indicator'\n      buttonType='text'\n      className={`dropdown-indicator ${get(rest, 'selectProps.menuIsOpen', false) && !c.inputInFocus ? 'active' : ''}`}\n      icon={<ChevronSmallDown />}\n      innerRef={innerRef}\n      onClick={c.onClickDropdownIndicator}\n      onKeyDown={onKeyDown}\n      variant={get(rest, 'selectProps.menuIsOpen', false) && !c.inputInFocus ? BUTTON_VARIANT.ACTIVE : BUTTON_VARIANT.DEFAULT}\n      {...rest}\n    />\n  )\n}\n\nexport default DropdownIndicator\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport { components } from 'react-select';\nimport DSPopper, { PopperPositions } from '@elliemae/ds-basic/Popper';\n\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\n// todo: the dropdown menu should be separated to a basic component and then import it here\n// use this for the moment but this needs to be changed\n\nconst TriggerComponent = aggregatedClasses('div')('combobox-trigger', null);\n\nconst SelectMenu = React.memo(props => {\n  const {\n    inlineMenu,\n    selectMeasure: { bounds },\n    expandMenuToContainer,\n    expandMenuOutsideContainer,\n    zIndex,\n  } = props.selectProps;\n\n  if (inlineMenu) {\n    return <components.Menu {...props} />;\n  }\n\n  const styleMenu = expandMenuToContainer ? { width: bounds.width } : {};\n  if (expandMenuOutsideContainer) {\n    styleMenu.width = 'auto';\n  }\n\n  return (\n    <DSPopper\n      contentComponent={\n        <div style={styleMenu} data-testid={'combobox-menu'}>\n          <components.Menu {...props} />\n        </div>\n      }\n      isOpen\n      placement={PopperPositions.BOTTOM_START}\n      preventOverflow={<TriggerComponent />}\n      showArrow={false}\n      triggerComponent={<TriggerComponent />}\n      zIndex={zIndex}\n    />\n  );\n});\n\nexport default SelectMenu;\n","import React from 'react'\nimport { components } from 'react-select'\nimport { Reference } from 'react-popper'\n\nconst Control = (props) => {\n  return (\n    <Reference>\n      { ({ ref }) => (\n        <div ref={ref}>\n          <components.Control {...props} />\n        </div>\n      ) }\n    </Reference>\n  )\n}\n\nexport default Control\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React, { useContext } from 'react'\nimport { get } from 'lodash'\nimport CloseXsmall from '@elliemae/ds-icons/CloseXsmall'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport { DropDownContext } from '../Combobox'\n\nconst ClearIndicator = (props) => {\n  const {\n    getStyles,\n    innerProps: { ref, ...restInnerProps },\n    innerRef,\n    selectProps,\n  } = props\n  const c = useContext(DropDownContext)\n\n  return (\n    <div\n      {...restInnerProps}\n      ref={ref}\n      aria-hidden='false'\n      style={getStyles('clearIndicator', props)}\n    >\n      <DSButton\n        {...props}\n        aria-label='clear-indicator'\n        buttonType='text'\n        className='clear-indicator'\n        icon={<CloseXsmall size='m' />}\n        innerRef={innerRef}\n        onKeyDown={(e) => {\n          if (e.keyCode === 32 || e.keyCode === 13) {\n            e.preventDefault()\n            props.clearValue()\n            const select = get(c, 'select.current')\n            if (select && select.focus) select.focus()\n          }\n          if (props.onKeyDown) props.onKeyDown(e)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default ClearIndicator\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport { get } from 'lodash';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\n\nconst CustomOption = ({ index, data, style, isScrolling }) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data;\n  const option = items[index];\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    'data-testid': 'combobox-option',\n    onClick: e => {\n      e.stopPropagation();\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e);\n    },\n  };\n  if (\n    useTruncatedText &&\n    !isScrolling &&\n    get(option, 'props.selectProps.menuIsOpen')\n  ) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n        tabIndex: 0,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    );\n  }\n  return React.cloneElement(option, {\n    ...option.props,\n    tabIndex: 0,\n    innerProps: optionProps,\n  });\n};\n\nexport default CustomOption;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react'\nimport DSTruncatedTooltipText from \"@elliemae/ds-basic/TruncatedTooltipText\"\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox'\n\nconst CustomOptionMulti = ({\n  index,\n  data,\n  style,\n  isScrolling,\n}) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data\n  const option = items[index]\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    onClick: (e) => {\n      e.stopPropagation()\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e)\n    },\n  }\n  if (useTruncatedText && !isScrolling) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    )\n  }\n\n  let allSelected = false\n  if (option.props.value === 'SELECT_ALL_COMBOBOX') {\n    if (option.props.selectProps.value.length === option.props.selectProps.options.length - 1\n      || option.props.selectProps.value.length === option.props.selectProps.options.length) {\n      allSelected = true\n    }\n  }\n  return React.cloneElement(option, {\n    ...option.props,\n    innerProps: optionProps,\n    children: (\n      <div className='combobox-v2-option-multiple-container'>\n        <DSCheckbox checked={option.props.isSelected || allSelected} labelText={option.props.children} />\n      </div>\n    ),\n  })\n}\n\nexport default CustomOptionMulti\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react'\n\nconst MultiSelectHeader = (props) => {\n  const count = props.children.filter(child => child.props.isSelected).length\n  return (\n    <div className='combobox-multi-select-header'>\n      {`${count} selected`}\n    </div>\n  )\n}\n\nexport default MultiSelectHeader\n","/* eslint-disable jsx-a11y/mouse-events-have-key-events */\n/* eslint-disable max-statements */\nimport React, { useRef, useState, useEffect } from 'react';\nimport { components } from 'react-select';\nimport { FixedSizeList as List } from 'react-window';\nimport memoize from 'memoize-one';\nimport { debounce } from 'lodash';\nimport CustomOption from './CustomOption';\nimport CustomOptionMulti from './CustomOptionMulti';\nimport MultiSelectHeader from './MultiSelectHeader';\n// import AllOption from './AllOption'\n\nconst createItemData = memoize((items, options) => ({\n  items,\n  options,\n}));\n\nconst scrollTo = (listRef, type) => {\n  if (listRef && listRef.current && listRef.current.props) {\n    const { items } = listRef.current.props.itemData;\n    const index = items.findIndex(item => item.props.isFocused);\n    listRef.current.scrollToItem(index, type);\n  }\n};\n// const scrollToMouse = debounce(scrollTo, 500)\nconst scrollToKeyword = debounce(scrollTo, 50);\n\nconst MenuList = props => {\n  const { children: options, selectProps, isMulti } = props;\n  const {\n    customMenuItemOptions,\n    selectMeasure: {\n      bounds: { bottom },\n    },\n  } = selectProps;\n  const listRef = useRef(null);\n  const [inside, setInside] = useState(false);\n  const remainingHeight = window.innerHeight - bottom - 10;\n\n  const handleKeyDown = () => {\n    setInside(false);\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const { itemSize = 35, maxOptions } = customMenuItemOptions;\n  const itemData = createItemData(options, customMenuItemOptions);\n  const maxOptionsScreen = maxOptions;\n  const safeOptionLength = options.length || 1;\n  const calculatedHeight =\n    itemSize *\n    (safeOptionLength < maxOptionsScreen || !maxOptionsScreen\n      ? safeOptionLength\n      : maxOptionsScreen);\n  const RenderOption = !isMulti ? CustomOption : CustomOptionMulti;\n  if (!options.length) return <components.MenuList {...props} />;\n  const height = maxOptions\n    ? calculatedHeight\n    : remainingHeight > calculatedHeight\n    ? calculatedHeight\n    : remainingHeight;\n\n  if (listRef && listRef.current && !inside) {\n    scrollToKeyword(listRef); // use autoScroll\n  }\n\n  return (\n    <div\n      data-testid={'combobox-menu-list'}\n      onMouseLeave={() => {\n        setInside(false);\n      }}\n    >\n      {isMulti && <MultiSelectHeader {...props} />}\n      <List\n        ref={listRef}\n        className={`combobox-menu-list ${isMulti &&\n          'combobox-menu-list-is-multi'}`}\n        height={height}\n        itemCount={options.length}\n        itemData={itemData}\n        itemSize={itemSize}\n        onScroll={() => {\n          setInside(true);\n        }}\n        useIsScrolling\n      >\n        {RenderOption}\n      </List>\n    </div>\n  );\n};\nexport default MenuList;\n","import React from 'react'\nimport DSTruncatedTooltipText from \"@elliemae/ds-basic/TruncatedTooltipText\"\nimport { PopperPositions as Positions } from \"@elliemae/ds-basic/Popper\"\n\nfunction MultiValueLabel({ children }) {\n  return <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n}\n\nexport default MultiValueLabel\n","import React from 'react'\nimport { components } from 'react-select'\n\nfunction MultiValueRemove({ innerProps, ...rest }) {\n  const innerPropsWithOutRemoval = {\n    ...innerProps, onClick: () => { }, onTouchEnd: () => { }, onMouseDown: () => { },\n  }\n  return <components.MultiValueRemove {...rest} innerProps={innerPropsWithOutRemoval}>,</components.MultiValueRemove>\n}\n\nexport default MultiValueRemove\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DSTruncatedTooltipText from \"@elliemae/ds-basic/TruncatedTooltipText\"\nimport { PopperPositions as Positions } from \"@elliemae/ds-basic/Popper\"\n\nfunction SingleValueLabel({ children }) {\n  return <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n}\n\nSingleValueLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n}\nexport default SingleValueLabel\n","import React from 'react'\nimport styled from 'styled-components'\nimport { DSCircularProgressIndicator } from '@elliemae/ds-basic/CircularProgressIndicator'\n\nconst Wrapper = styled.div`\n display: flex;\n justify-content: center;\n margin-top: 12px;\n`\n\nconst LoadingIndicator = () => (\n  <Wrapper data-testid='ds-combobox_loading-indicator'>\n    <DSCircularProgressIndicator size='m' />\n  </Wrapper>\n)\n\nexport default LoadingIndicator\n","/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\nimport React, { useContext, useRef } from 'react';\nimport { components } from 'react-select';\nimport { cx } from '@elliemae/ds-utilities/utils';\nimport { DropDownContext } from '../Combobox';\n\nexport function ValueContainer({ children, ...rest }) {\n  const valueContainerRef = useRef(null);\n  const c = useContext(DropDownContext);\n  return (\n    <div\n      ref={valueContainerRef}\n      className={cx(\n        'combobox-v2-value-container',\n        c.inputInFocus && 'in-focus',\n        c.value && c.clearable && 'has-value',\n        c.removeDropdownIndicator && 'dropdown-indicator-removed',\n      )}\n    >\n      <components.ValueContainer {...rest}>\n        {children}\n      </components.ValueContainer>\n    </div>\n  );\n}\n\nexport default ValueContainer;\n","/* eslint-disable no-confusing-arrow */\n/* eslint-disable import/no-cycle, max-lines */\n/* eslint-disable no-unused-expressions */\nimport React, { useCallback, useState, useRef } from 'react';\nimport Select from 'react-select';\nimport { Manager } from 'react-popper';\nimport { withContentRect } from 'react-measure';\nimport { cx } from '@elliemae/ds-utilities/utils';\nimport theme from '@elliemae/ds-system/theme';\nimport { TooltipTextProvider } from '@elliemae/ds-basic/TruncatedTooltipText';\nimport withSelectStringValueConverter from '../v1/withSelectStringValueConverter';\nimport DropdownIndicator from './components/DropdownIndicator';\nimport SelectMenu from './components/SelectMenu';\nimport Control from './components/Control';\nimport ClearIndicator from './components/ClearIndicator';\nimport MenuList from './components/MenuList';\nimport MultiValueLabel from './components/MultiValueLabel';\nimport MultiValueRemove from './components/MultiValueRemove';\nimport SingleValueLabel from './components/SingleValueLabel';\nimport LoadingIndicator from './components/LoadingIndicator';\n// import { IndicatorSeparator } from './components/IndicatorSeparator'\nimport { calculateWidth } from './components/calculateWidth';\nimport { ValueContainer } from './components/ValueContainer';\n\nconst blockName = 'em-ds-combobox';\nconst container = `${blockName}-container`;\nconst getValues = (option, isMulti, valueProperty) => {\n  if (!option) return null;\n  return isMulti\n    ? option.map(mOption => mOption[valueProperty])\n    : option[valueProperty];\n};\nexport const DropDownContext = React.createContext();\n\nconst DSComboBox2 = ({\n  hideSelectedOptions = false,\n  autoFocus = false,\n  className = '',\n  hasError = false,\n  onFocus = () => null,\n  onBlur = () => null,\n  onChange = () => null,\n  // onKeyDown = () => null,\n  filterOption = undefined,\n  onClickDropdownIndicator = () => null,\n  onInputKeyDown = () => null,\n  onInputChange = () => null,\n  isRtl = false,\n  isFocused = undefined,\n  isMulti = false,\n  showAllOption = false,\n  value = null,\n  options = [],\n  clearable = false,\n  searchable = true,\n  disabled = false,\n  placeholder = '',\n  valueProperty = 'value',\n  labelProperty = 'label',\n  loading = false,\n  menuIsOpen = undefined,\n  inlineMenu = false,\n  components: customComponents = {},\n  measureRef,\n  contentRect,\n  readOnly = false,\n  returnValue = true,\n  expandMenuToContainer = true,\n  expandMenuOutsideContainer = false,\n  customMenuItemOptions = {\n    useTruncatedText: false,\n    itemSize: 35,\n  },\n  containerProps = {},\n  maxOptions,\n  zIndex = 11,\n  ...restPropsToCustomizeSelect\n}) => {\n  const select = useRef();\n  const [inputInFocus, setFocus] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(menuIsOpen);\n  const [isMultipleKeyPressed, setIsMultipleKeyPressed] = useState(false);\n\n  const handleInputChange = useCallback((val, action) => {\n    if (action.action === 'input-change') {\n      setMenuOpen(true);\n      if (!inlineMenu) onChange({ value: val, label: val }, action);\n    }\n    onInputChange(val, action);\n  }, []);\n\n  const handleOnKeyDown = useCallback(\n    e => {\n      if (event.key == 'Control') setIsMultipleKeyPressed(true);\n\n      //If Ctrl + Enter are pressed, focus is set to the input and the menu closes\n      if (isMultipleKeyPressed && event.key == 'Enter') {\n        setFocus(true);\n        setMenuOpen(false);\n        setIsMultipleKeyPressed(false);\n        e.preventDefault();\n      }\n    },\n    [isMultipleKeyPressed],\n  );\n\n  const handleFocus = useCallback(e => {\n    setFocus(true);\n    if (!inlineMenu) setMenuOpen(true);\n    onFocus(e);\n  }, []);\n\n  const handleBlur = useCallback(e => {\n    setFocus(false);\n    if (!inlineMenu) setMenuOpen(false);\n    onBlur(e);\n  }, []);\n\n  return (\n    <TooltipTextProvider>\n      <DropDownContext.Provider\n        value={{\n          inputInFocus,\n          value,\n          isMulti,\n          onClickDropdownIndicator,\n          clearable,\n          removeDropdownIndicator: customComponents.DropdownIndicator === null,\n          select,\n        }}\n      >\n        <Manager>\n          <div\n            ref={measureRef}\n            className={cx(\n              `${container}`,\n              inputInFocus && 'in-focus',\n              hasError && 'with-error',\n              disabled && 'is-disabled',\n              className,\n            )}\n            data-testid={'combobox'}\n            {...containerProps}\n          >\n            <Select\n              ref={select}\n              autoFocus={autoFocus}\n              classNamePrefix={blockName}\n              // If it is multiselect let the menu open on select.\n              closeMenuOnSelect={!isMulti}\n              components={{\n                Control,\n                // IndicatorSeparator,\n                Menu: SelectMenu,\n                DropdownIndicator,\n                ClearIndicator,\n                MultiValueLabel,\n                MultiValueRemove,\n                SingleValue: SingleValueLabel,\n                MenuList,\n                ValueContainer,\n                ...customComponents,\n              }}\n              customMenuItemOptions={{ maxOptions, ...customMenuItemOptions }}\n              expandMenuOutsideContainer={expandMenuOutsideContainer}\n              expandMenuToContainer={expandMenuToContainer}\n              filterOption={filterOption}\n              getOptionLabel={option => option[labelProperty]}\n              getOptionValue={option => option[valueProperty]}\n              hideSelectedOptions={hideSelectedOptions}\n              inlineMenu={inlineMenu}\n              isClearable={clearable}\n              isDisabled={disabled || readOnly}\n              isFocused={isFocused}\n              isMulti={isMulti}\n              isRtl={isRtl}\n              isSearchable={readOnly ? false : searchable}\n              menuIsOpen={menuOpen}\n              noOptionsMessage={() => (loading ? <LoadingIndicator /> : null)}\n              onBlur={handleBlur}\n              onChange={\n                returnValue\n                  ? (option, action) => {\n                      if (\n                        showAllOption &&\n                        isMulti &&\n                        option.find(op => op.value === 'SELECT_ALL_COMBOBOX')\n                      ) {\n                        return onChange(\n                          getValues(options, isMulti, valueProperty),\n                          action,\n                        );\n                      }\n                      isMulti ? setMenuOpen(true) : setMenuOpen(undefined);\n                      return onChange(\n                        getValues(option, isMulti, valueProperty),\n                        action,\n                      );\n                    }\n                  : (option, action) => {\n                      if (\n                        showAllOption &&\n                        isMulti &&\n                        option.find(op => op.value === 'SELECT_ALL_COMBOBOX')\n                      ) {\n                        return onChange(options, action);\n                      }\n                      isMulti ? setMenuOpen(true) : setMenuOpen(undefined);\n                      return onChange(option, action);\n                    }\n              }\n              onFocus={handleFocus}\n              onInputChange={handleInputChange}\n              onInputKeyDown={onInputKeyDown}\n              onKeyDown={handleOnKeyDown}\n              options={loading ? [] : options}\n              placeholder={placeholder}\n              selectMeasure={contentRect}\n              styles={{\n                control: () => null,\n                option: () => null,\n                dropdownIndicator: () => null,\n                clearIndicator: () => null,\n                placeholder: () => null,\n                indicatorSeparator: () => null,\n                singleValue: provided => ({\n                  ...provided,\n                  maxWidth: '90%',\n                }),\n                multiValueLabel: provided => ({\n                  ...provided,\n                  backgroundColor: 'transparent',\n                }),\n                multiValue: provided => ({\n                  ...provided,\n                  backgroundColor: 'transparent',\n                }),\n                multiValueRemove: provided => ({\n                  ...provided,\n                  '&:hover': {\n                    backgroundColor: 'transparent',\n                    color: theme.colors.neutral[800],\n                  },\n                }),\n                valueContainer: provided => ({\n                  ...provided,\n                  flexWrap: 'nowrap',\n                }),\n                menu: () => {\n                  if (expandMenuOutsideContainer) {\n                    const width = calculateWidth(options);\n                    if (!width) return null;\n                    return {\n                      width: `${width}px`,\n                    };\n                  }\n                  if (loading) {\n                    return {\n                      height: '72px',\n                    };\n                  }\n                  return null;\n                },\n              }}\n              tabSelectsValue={false}\n              value={value}\n              zIndex={zIndex}\n              {...restPropsToCustomizeSelect}\n            />\n          </div>\n        </Manager>\n      </DropDownContext.Provider>\n    </TooltipTextProvider>\n  );\n};\n\nexport default withSelectStringValueConverter(\n  withContentRect('bounds')(DSComboBox2),\n);\n","const letterFactor = 5.7\nconst fixedSpace = 45\nexport function calculateWidth(options) {\n  const longest = options.reduce((a, b) => {\n    if (a && a.label && b && b.label) return a.label.length > b.label.length ? a : b\n    return 0\n  })\n  if (longest && longest.label && longest.label.length) {\n    // if (longest.label.length > fixedSpace) return fixedSpace * letterFactor\n    return longest.label.length * letterFactor + fixedSpace\n  }\n  return 0\n}\n"],"sourceRoot":""}