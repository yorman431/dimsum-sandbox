{"version":3,"sources":["utils/randomData.js","DataGrid/columns.js","DataGrid/PUI-2090.js"],"names":["groups","randomEntity","monthly","random","toFixed","id","uuidv4","group","name","owner","salary","overtime","bonuses","commission","other","text","inFolderE","randomEntities","count","Array","fill","map","randomGroupedEntities","entities","g","children","filter","entity","length","property","label","sortable","resizable","searchable","groupedRows","onSelectRow","a","b","c","console","log","columns","rows","searchFilters","selectable","autoHeight","resizeableColumns","groupedBy","groupedRowsRenderHeader","rowData","value"],"mappings":"uGAAA,8KAGMA,EAAS,CAAC,QAAS,QAAS,OAAQ,QAE7BC,EAAe,WAC1B,IAAMC,EAAUC,iBAAO,KAAM,MAAM,GAAMC,QAAQ,GAC3CC,EAAKC,cACLC,EAAQP,EAAOG,iBAAO,EAAG,IAC/B,MAAO,CACLE,KACAG,KAAK,GAAD,OAAKL,iBAAO,EAAG,GAAK,EAAI,WAAa,WAArC,YAAmDE,GACvDI,MAAO,CAAC,WAAY,cAAe,QAAQN,iBAAO,EAAG,IACrDO,QAAmB,GAAVR,GAAcE,QAAQ,GAC/BF,UACAS,SAAUR,iBAAO,GAAI,KAAK,GAAMC,QAAQ,GACxCQ,QAAST,iBAAO,GAAI,KAAK,GAAMC,QAAQ,GACvCS,WAAYV,iBAAO,GAAI,MAAO,GAAMC,QAAQ,GAC5CU,MAAOX,iBAAO,GAAI,KAAM,GAAMC,QAAQ,GACtCW,KAAM,6BACNC,UAAWb,iBAAO,EAAG,GAAK,EAC1BI,UAGSU,EAAiB,SAAAC,GAAK,OACjC,IAAIC,MAAMD,GAAOE,KAAK,GAAGC,KAAI,WAC3B,OAAOpB,QAEEqB,EAAwB,SAAAJ,GACnC,IAAMK,EAAWN,EAAeC,GAChC,OAAOlB,EACJqB,KAAI,SAAAG,GAAC,MAAK,CACTjB,MAAOiB,EACPC,SAAUF,EAASG,QAAO,SAAAC,GAAM,OAAIA,EAAOpB,QAAUiB,SAEtDE,QAAO,SAAAF,GAAC,OAAIA,EAAEC,SAASG,Y,iCCnC5B,OAAe,WACb,CACEC,SAAU,OACVC,MAAO,OACPC,UAAU,EACVC,WAAW,GAEb,CACEH,SAAU,QACVC,MAAO,QACPE,WAAW,GAEb,CACEH,SAAU,SACVC,MAAO,SACPG,YAAY,EACZD,WAAW,GAEb,CACEH,SAAU,UACVC,MAAO,UACPE,WAAW,GAEb,CACEH,SAAU,WACVC,MAAO,WACPE,WAAW,K,iCC1Bf,sDAKME,EAAcjB,yBAAe,GAG7BkB,EAAc,SAACC,EAAGC,EAAGC,GACzBC,QAAQC,IAAIJ,EAAGC,EAAGC,IAGL,qBACb,OACE,kBAAC,IAAD,CACEH,YAAaA,EACbM,QAASA,UACTC,KAAMR,EACNS,eAAa,EACbZ,UAAQ,EACRa,YAAU,EACVC,YAAU,EACVC,mBAAiB,EACjBC,UAAU,QAEVb,aAAW,EACXc,wBAAyB,SAAAC,GACvBV,QAAQC,IAAIS,GADsB,IAE1BC,GAAUD,GAAW,IAArBC,MACR,OAAO,gDAAYA,EAAZ,U","file":"static/js/13.ca16971b.chunk.js","sourcesContent":["import { random } from \"lodash\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst groups = [\"North\", \"South\", \"East\", \"West\"];\n\nexport const randomEntity = () => {\n  const monthly = random(1500, 3500, true).toFixed(2);\n  const id = uuidv4();\n  const group = groups[random(0, 3)];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? \"John Doe\" : \"Jon Snow\"} ${id}`,\n    owner: [\"Borrower\", \"Co-Borrower\", \"Both\"][random(0, 2)],\n    salary: (monthly * 12).toFixed(2),\n    monthly,\n    overtime: random(20, 800, true).toFixed(2),\n    bonuses: random(20, 500, true).toFixed(2),\n    commission: random(20, 25000, true).toFixed(2),\n    other: random(20, 1000, true).toFixed(2),\n    text: \"Some random very long text\",\n    inFolderE: random(0, 1) > 0,\n    group\n  };\n};\nexport const randomEntities = count =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity();\n  });\nexport const randomGroupedEntities = count => {\n  const entities = randomEntities(count);\n  return groups\n    .map(g => ({\n      group: g,\n      children: entities.filter(entity => entity.group === g)\n    }))\n    .filter(g => g.children.length);\n};\n","export default [\n  {\n    property: \"name\",\n    label: \"Name\",\n    sortable: true,\n    resizable: true\n  },\n  {\n    property: \"owner\",\n    label: \"Owner\",\n    resizable: true\n  },\n  {\n    property: \"salary\",\n    label: \"Salary\",\n    searchable: true,\n    resizable: true\n  },\n  {\n    property: \"monthly\",\n    label: \"Monthly\",\n    resizable: true\n  },\n  {\n    property: \"overtime\",\n    label: \"Overtime\",\n    resizable: true\n  }\n];\n","import React from \"react\";\nimport { DSDataGrid } from \"@elliemae/ds-datagrids\";\nimport columns from \"./columns\";\nimport { randomEntities } from \"../utils/randomData\";\n\nconst groupedRows = randomEntities(5);\n\n// Prints only the index (3rd arg) e.g: [] \"mixed\" 4\nconst onSelectRow = (a, b, c) => {\n  console.log(a, b, c);\n};\n\nexport default () => {\n  return (\n    <DSDataGrid\n      onSelectRow={onSelectRow}\n      columns={columns}\n      rows={groupedRows}\n      searchFilters\n      sortable\n      selectable\n      autoHeight\n      resizeableColumns\n      groupedBy=\"group\"\n      // getChildrenRows={({ rowData }) => rowData.children}\n      groupedRows\n      groupedRowsRenderHeader={rowData => {\n        console.log(rowData);\n        const { value } = rowData || {};\n        return <> Group : {value} </>;\n      }}\n    />\n  );\n};\n"],"sourceRoot":""}